diff --git a/android_webview/common/aw_switches.cc b/android_webview/common/aw_switches.cc
index 81ef88cd09..c74a871e62 100644
--- a/android_webview/common/aw_switches.cc
+++ b/android_webview/common/aw_switches.cc
@@ -6,6 +6,8 @@
 
 namespace switches {
 
+const char kWebViewForceWebsite[] = "webview-force-website";
+
 const char kWebViewLogJsConsoleMessages[] = "webview-log-js-console-messages";
 
 const char kWebViewSandboxedRenderer[] = "webview-sandboxed-renderer";
diff --git a/android_webview/common/aw_switches.h b/android_webview/common/aw_switches.h
index 3e60d2ce0a..fea0d1c88c 100644
--- a/android_webview/common/aw_switches.h
+++ b/android_webview/common/aw_switches.h
@@ -7,6 +7,7 @@
 
 namespace switches {
 
+extern const char kWebViewForceWebsite[];
 extern const char kWebViewLogJsConsoleMessages[];
 extern const char kWebViewSandboxedRenderer[];
 extern const char kWebViewDisableSafebrowsingSupport[];
diff --git a/android_webview/glue/java/src/com/android/webview/chromium/ContentSettingsAdapter.java b/android_webview/glue/java/src/com/android/webview/chromium/ContentSettingsAdapter.java
index 23911eeb37..ec9fac992c 100644
--- a/android_webview/glue/java/src/com/android/webview/chromium/ContentSettingsAdapter.java
+++ b/android_webview/glue/java/src/com/android/webview/chromium/ContentSettingsAdapter.java
@@ -54,6 +54,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public void setSupportZoom(boolean support) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_SET_SUPPORT_ZOOM")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_SUPPORT_ZOOM, WebViewChromium.convertToParameterArray(support));
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_SUPPORT_ZOOM);
             mAwSettings.setSupportZoom(support);
         }
@@ -63,6 +64,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public boolean supportZoom() {
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICall.Framework.WEB_SETTINGS_SUPPORT_ZOOM")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SUPPORT_ZOOM, WebViewChromium.convertToParameterArray());
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SUPPORT_ZOOM);
             return mAwSettings.supportZoom();
         }
@@ -72,6 +74,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public void setBuiltInZoomControls(boolean enabled) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_SET_BUILT_IN_ZOOM_CONTROLS")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_BUILT_IN_ZOOM_CONTROLS, WebViewChromium.convertToParameterArray(enabled));
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_BUILT_IN_ZOOM_CONTROLS);
             mAwSettings.setBuiltInZoomControls(enabled);
         }
@@ -81,6 +84,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public boolean getBuiltInZoomControls() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_GET_BUILT_IN_ZOOM_CONTROLS")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_BUILT_IN_ZOOM_CONTROLS, WebViewChromium.convertToParameterArray());
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_BUILT_IN_ZOOM_CONTROLS);
             return mAwSettings.getBuiltInZoomControls();
         }
@@ -90,6 +94,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public void setDisplayZoomControls(boolean enabled) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_SET_DISPLAY_ZOOM_CONTROLS")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_DISPLAY_ZOOM_CONTROLS, WebViewChromium.convertToParameterArray(enabled));
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_DISPLAY_ZOOM_CONTROLS);
             mAwSettings.setDisplayZoomControls(enabled);
         }
@@ -99,6 +104,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public boolean getDisplayZoomControls() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_GET_DISPLAY_ZOOM_CONTROLS")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_DISPLAY_ZOOM_CONTROLS, WebViewChromium.convertToParameterArray());
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_DISPLAY_ZOOM_CONTROLS);
             return mAwSettings.getDisplayZoomControls();
         }
@@ -108,6 +114,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public void setAllowFileAccess(boolean allow) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_SET_ALLOW_FILE_ACCESS")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_ALLOW_FILE_ACCESS, WebViewChromium.convertToParameterArray(allow));
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_ALLOW_FILE_ACCESS);
             mAwSettings.setAllowFileAccess(allow);
         }
@@ -117,6 +124,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public boolean getAllowFileAccess() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_GET_ALLOW_FILE_ACCESS")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_ALLOW_FILE_ACCESS, WebViewChromium.convertToParameterArray());
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_ALLOW_FILE_ACCESS);
             return mAwSettings.getAllowFileAccess();
         }
@@ -126,6 +134,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public void setAllowContentAccess(boolean allow) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_SET_ALLOW_CONTENT_ACCESS")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_ALLOW_CONTENT_ACCESS, WebViewChromium.convertToParameterArray(allow));
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_ALLOW_CONTENT_ACCESS);
             mAwSettings.setAllowContentAccess(allow);
         }
@@ -135,6 +144,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public boolean getAllowContentAccess() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_GET_ALLOW_CONTENT_ACCESS")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_ALLOW_CONTENT_ACCESS, WebViewChromium.convertToParameterArray());
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_ALLOW_CONTENT_ACCESS);
             return mAwSettings.getAllowContentAccess();
         }
@@ -144,6 +154,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public void setLoadWithOverviewMode(boolean overview) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_SET_LOAD_WITH_OVERVIEW_MODE")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_LOAD_WITH_OVERVIEW_MODE, WebViewChromium.convertToParameterArray(overview));
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_LOAD_WITH_OVERVIEW_MODE);
             mAwSettings.setLoadWithOverviewMode(overview);
         }
@@ -153,6 +164,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public boolean getLoadWithOverviewMode() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_GET_LOAD_WITH_OVERVIEW_MODE")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_LOAD_WITH_OVERVIEW_MODE, WebViewChromium.convertToParameterArray());
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_LOAD_WITH_OVERVIEW_MODE);
             return mAwSettings.getLoadWithOverviewMode();
         }
@@ -162,6 +174,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public void setSafeBrowsingEnabled(boolean accept) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_SET_SAFE_BROWSING_ENABLED")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_SAFE_BROWSING_ENABLED, WebViewChromium.convertToParameterArray(accept));
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_SAFE_BROWSING_ENABLED);
             mAwSettings.setSafeBrowsingEnabled(accept);
         }
@@ -171,6 +184,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public boolean getSafeBrowsingEnabled() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_GET_SAFE_BROWSING_ENABLED")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_SAFE_BROWSING_ENABLED, WebViewChromium.convertToParameterArray());
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_SAFE_BROWSING_ENABLED);
             return mAwSettings.getSafeBrowsingEnabled();
         }
@@ -213,6 +227,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) return;
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_SET_SAVE_FORM_DATA")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_SAVE_FORM_DATA, WebViewChromium.convertToParameterArray(save));
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_SAVE_FORM_DATA);
             mAwSettings.setSaveFormData(save);
         }
@@ -223,6 +238,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) return false;
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_GET_SAVE_FORM_DATA")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_SAVE_FORM_DATA, WebViewChromium.convertToParameterArray());
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_SAVE_FORM_DATA);
             return mAwSettings.getSaveFormData();
         }
@@ -243,6 +259,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public synchronized void setTextZoom(int textZoom) {
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICall.Framework.WEB_SETTINGS_SET_TEXT_ZOOM")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_TEXT_ZOOM, WebViewChromium.convertToParameterArray(textZoom));
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_TEXT_ZOOM);
             mAwSettings.setTextZoom(textZoom);
         }
@@ -252,6 +269,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public synchronized int getTextZoom() {
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICall.Framework.WEB_SETTINGS_GET_TEXT_ZOOM")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_TEXT_ZOOM, WebViewChromium.convertToParameterArray());
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_TEXT_ZOOM);
             return mAwSettings.getTextZoom();
         }
@@ -283,6 +301,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public synchronized void setUserAgent(int ua) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_SET_USER_AGENT")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_USER_AGENT, WebViewChromium.convertToParameterArray(ua));
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_USER_AGENT);
             mAwSettings.setUserAgent(ua);
         }
@@ -298,6 +317,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public synchronized void setUseWideViewPort(boolean use) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_SET_USE_WIDE_VIEW_PORT")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_USE_WIDE_VIEW_PORT, WebViewChromium.convertToParameterArray(use));
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_USE_WIDE_VIEW_PORT);
             mAwSettings.setUseWideViewPort(use);
         }
@@ -307,6 +327,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public synchronized boolean getUseWideViewPort() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_GET_USE_WIDE_VIEW_PORT")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_USE_WIDE_VIEW_PORT, WebViewChromium.convertToParameterArray());
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_USE_WIDE_VIEW_PORT);
             return mAwSettings.getUseWideViewPort();
         }
@@ -316,6 +337,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public synchronized void setSupportMultipleWindows(boolean support) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_SET_SUPPORT_MULTIPLE_WINDOWS")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_SUPPORT_MULTIPLE_WINDOWS, WebViewChromium.convertToParameterArray(support));
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_SUPPORT_MULTIPLE_WINDOWS);
             mAwSettings.setSupportMultipleWindows(support);
         }
@@ -325,6 +347,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public synchronized boolean supportMultipleWindows() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_SUPPORT_MULTIPLE_WINDOWS")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SUPPORT_MULTIPLE_WINDOWS, WebViewChromium.convertToParameterArray());
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SUPPORT_MULTIPLE_WINDOWS);
             return mAwSettings.supportMultipleWindows();
         }
@@ -334,6 +357,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public synchronized void setLayoutAlgorithm(LayoutAlgorithm l) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_SET_LAYOUT_ALGORITHM")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_LAYOUT_ALGORITHM, WebViewChromium.convertToParameterArray(l));
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_LAYOUT_ALGORITHM);
             switch (l) {
                 case NORMAL:
@@ -358,6 +382,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public synchronized LayoutAlgorithm getLayoutAlgorithm() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_GET_LAYOUT_ALGORITHM")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_LAYOUT_ALGORITHM, WebViewChromium.convertToParameterArray());
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_LAYOUT_ALGORITHM);
             int value = mAwSettings.getLayoutAlgorithm();
             switch (value) {
@@ -379,6 +404,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public synchronized void setStandardFontFamily(String font) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_SET_STANDARD_FONT_FAMILY")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_STANDARD_FONT_FAMILY, WebViewChromium.convertToParameterArray(font));
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_STANDARD_FONT_FAMILY);
             mAwSettings.setStandardFontFamily(font);
         }
@@ -388,6 +414,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public synchronized String getStandardFontFamily() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_GET_STANDARD_FONT_FAMILY")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_STANDARD_FONT_FAMILY, WebViewChromium.convertToParameterArray());
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_STANDARD_FONT_FAMILY);
             return mAwSettings.getStandardFontFamily();
         }
@@ -397,6 +424,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public synchronized void setFixedFontFamily(String font) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_SET_FIXED_FONT_FAMILY")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_FIXED_FONT_FAMILY, WebViewChromium.convertToParameterArray(font));
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_FIXED_FONT_FAMILY);
             mAwSettings.setFixedFontFamily(font);
         }
@@ -406,6 +434,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public synchronized String getFixedFontFamily() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_GET_FIXED_FONT_FAMILY")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_FIXED_FONT_FAMILY, WebViewChromium.convertToParameterArray());
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_FIXED_FONT_FAMILY);
             return mAwSettings.getFixedFontFamily();
         }
@@ -415,6 +444,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public synchronized void setSansSerifFontFamily(String font) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_SET_SANS_SERIF_FONT_FAMILY")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_SANS_SERIF_FONT_FAMILY, WebViewChromium.convertToParameterArray(font));
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_SANS_SERIF_FONT_FAMILY);
             mAwSettings.setSansSerifFontFamily(font);
         }
@@ -424,6 +454,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public synchronized String getSansSerifFontFamily() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_GET_SANS_SERIF_FONT_FAMILY")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_SANS_SERIF_FONT_FAMILY, WebViewChromium.convertToParameterArray());
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_SANS_SERIF_FONT_FAMILY);
             return mAwSettings.getSansSerifFontFamily();
         }
@@ -433,6 +464,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public synchronized void setSerifFontFamily(String font) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_SET_SERIF_FONT_FAMILY")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_SERIF_FONT_FAMILY, WebViewChromium.convertToParameterArray(font));
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_SERIF_FONT_FAMILY);
             mAwSettings.setSerifFontFamily(font);
         }
@@ -442,6 +474,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public synchronized String getSerifFontFamily() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_GET_SERIF_FONT_FAMILY")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_SERIF_FONT_FAMILY, WebViewChromium.convertToParameterArray());
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_SERIF_FONT_FAMILY);
             return mAwSettings.getSerifFontFamily();
         }
@@ -451,6 +484,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public synchronized void setCursiveFontFamily(String font) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_SET_CURSIVE_FONT_FAMILY")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_CURSIVE_FONT_FAMILY, WebViewChromium.convertToParameterArray(font));
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_CURSIVE_FONT_FAMILY);
             mAwSettings.setCursiveFontFamily(font);
         }
@@ -460,6 +494,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public synchronized String getCursiveFontFamily() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_GET_CURSIVE_FONT_FAMILY")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_CURSIVE_FONT_FAMILY, WebViewChromium.convertToParameterArray());
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_CURSIVE_FONT_FAMILY);
             return mAwSettings.getCursiveFontFamily();
         }
@@ -469,6 +504,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public synchronized void setFantasyFontFamily(String font) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_SET_FANTASY_FONT_FAMILY")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_FANTASY_FONT_FAMILY, WebViewChromium.convertToParameterArray(font));
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_FANTASY_FONT_FAMILY);
             mAwSettings.setFantasyFontFamily(font);
         }
@@ -478,6 +514,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public synchronized String getFantasyFontFamily() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_GET_FANTASY_FONT_FAMILY")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_FANTASY_FONT_FAMILY, WebViewChromium.convertToParameterArray());
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_FANTASY_FONT_FAMILY);
             return mAwSettings.getFantasyFontFamily();
         }
@@ -487,6 +524,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public synchronized void setMinimumFontSize(int size) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_SET_MINIMUM_FONT_SIZE")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_MINIMUM_FONT_SIZE, WebViewChromium.convertToParameterArray(size));
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_MINIMUM_FONT_SIZE);
             mAwSettings.setMinimumFontSize(size);
         }
@@ -496,6 +534,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public synchronized int getMinimumFontSize() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_GET_MINIMUM_FONT_SIZE")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_MINIMUM_FONT_SIZE, WebViewChromium.convertToParameterArray());
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_MINIMUM_FONT_SIZE);
             return mAwSettings.getMinimumFontSize();
         }
@@ -505,6 +544,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public synchronized void setMinimumLogicalFontSize(int size) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_SET_MINIMUM_LOGICAL_FONT_SIZE")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_MINIMUM_LOGICAL_FONT_SIZE, WebViewChromium.convertToParameterArray(size));
             WebViewChromium.recordWebViewApiCall(
                     ApiCall.WEB_SETTINGS_SET_MINIMUM_LOGICAL_FONT_SIZE);
             mAwSettings.setMinimumLogicalFontSize(size);
@@ -515,6 +555,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public synchronized int getMinimumLogicalFontSize() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_GET_MINIMUM_LOGICAL_FONT_SIZE")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_MINIMUM_LOGICAL_FONT_SIZE, WebViewChromium.convertToParameterArray());
             WebViewChromium.recordWebViewApiCall(
                     ApiCall.WEB_SETTINGS_GET_MINIMUM_LOGICAL_FONT_SIZE);
             return mAwSettings.getMinimumLogicalFontSize();
@@ -525,6 +566,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public synchronized void setDefaultFontSize(int size) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_SET_DEFAULT_FONT_SIZE")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_DEFAULT_FONT_SIZE, WebViewChromium.convertToParameterArray(size));
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_DEFAULT_FONT_SIZE);
             mAwSettings.setDefaultFontSize(size);
         }
@@ -534,6 +576,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public synchronized int getDefaultFontSize() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_GET_DEFAULT_FIXED_FONT_SIZE")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_DEFAULT_FIXED_FONT_SIZE, WebViewChromium.convertToParameterArray());
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_DEFAULT_FIXED_FONT_SIZE);
             return mAwSettings.getDefaultFontSize();
         }
@@ -543,6 +586,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public synchronized void setDefaultFixedFontSize(int size) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_SET_DEFAULT_FIXED_FONT_SIZE")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_DEFAULT_FIXED_FONT_SIZE, WebViewChromium.convertToParameterArray(size));
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_DEFAULT_FIXED_FONT_SIZE);
             mAwSettings.setDefaultFixedFontSize(size);
         }
@@ -552,6 +596,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public synchronized int getDefaultFixedFontSize() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_GET_DEFAULT_FIXED_FONT_SIZE")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_DEFAULT_FIXED_FONT_SIZE, WebViewChromium.convertToParameterArray());
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_DEFAULT_FIXED_FONT_SIZE);
             return mAwSettings.getDefaultFixedFontSize();
         }
@@ -561,6 +606,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public synchronized void setLoadsImagesAutomatically(boolean flag) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_SET_LOADS_IMAGES_AUTOMATICALLY")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_LOADS_IMAGES_AUTOMATICALLY, WebViewChromium.convertToParameterArray(flag));
             WebViewChromium.recordWebViewApiCall(
                     ApiCall.WEB_SETTINGS_SET_LOADS_IMAGES_AUTOMATICALLY);
             mAwSettings.setLoadsImagesAutomatically(flag);
@@ -571,6 +617,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public synchronized boolean getLoadsImagesAutomatically() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_GET_LOADS_IMAGES_AUTOMATICALLY")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_LOADS_IMAGES_AUTOMATICALLY, WebViewChromium.convertToParameterArray());
             WebViewChromium.recordWebViewApiCall(
                     ApiCall.WEB_SETTINGS_GET_LOADS_IMAGES_AUTOMATICALLY);
             return mAwSettings.getLoadsImagesAutomatically();
@@ -581,6 +628,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public synchronized void setBlockNetworkImage(boolean flag) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_SET_BLOCK_NETWORK_IMAGE")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_BLOCK_NETWORK_IMAGE, WebViewChromium.convertToParameterArray(flag));
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_BLOCK_NETWORK_IMAGE);
             mAwSettings.setImagesEnabled(!flag);
         }
@@ -590,6 +638,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public synchronized boolean getBlockNetworkImage() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_GET_BLOCK_NETWORK_IMAGE")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_BLOCK_NETWORK_IMAGE, WebViewChromium.convertToParameterArray());
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_BLOCK_NETWORK_IMAGE);
             return !mAwSettings.getImagesEnabled();
         }
@@ -599,6 +648,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public synchronized void setBlockNetworkLoads(boolean flag) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_SET_BLOCK_NETWORK_LOADS")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_BLOCK_NETWORK_LOADS, WebViewChromium.convertToParameterArray(flag));
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_BLOCK_NETWORK_LOADS);
             mAwSettings.setBlockNetworkLoads(flag);
         }
@@ -608,6 +658,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public synchronized boolean getBlockNetworkLoads() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_GET_BLOCK_NETWORK_LOADS")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_BLOCK_NETWORK_LOADS, WebViewChromium.convertToParameterArray());
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_BLOCK_NETWORK_LOADS);
             return mAwSettings.getBlockNetworkLoads();
         }
@@ -617,6 +668,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public synchronized void setJavaScriptEnabled(boolean flag) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_SET_JAVA_SCRIPT_ENABLED")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_JAVA_SCRIPT_ENABLED, WebViewChromium.convertToParameterArray(flag));
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_JAVA_SCRIPT_ENABLED);
             mAwSettings.setJavaScriptEnabled(flag);
         }
@@ -626,6 +678,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public void setAllowUniversalAccessFromFileURLs(boolean flag) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.ApiCall.WEB_SETTINGS_SET_ALLOW_UNIVERSAL_ACCESS_FROM_FILE_URLS")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_ALLOW_UNIVERSAL_ACCESS_FROM_FILE_URLS, WebViewChromium.convertToParameterArray(flag));
             WebViewChromium.recordWebViewApiCall(
                     ApiCall.WEB_SETTINGS_SET_ALLOW_UNIVERSAL_ACCESS_FROM_FILE_URLS);
             mAwSettings.setAllowUniversalAccessFromFileURLs(flag);
@@ -636,6 +689,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public void setAllowFileAccessFromFileURLs(boolean flag) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.ApiCall.WEB_SETTINGS_SET_ALLOW_FILE_ACCESS_FROM_FILE_URLS")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_ALLOW_FILE_ACCESS_FROM_FILE_URLS, WebViewChromium.convertToParameterArray(flag));
             WebViewChromium.recordWebViewApiCall(
                     ApiCall.WEB_SETTINGS_SET_ALLOW_FILE_ACCESS_FROM_FILE_URLS);
             mAwSettings.setAllowFileAccessFromFileURLs(flag);
@@ -651,6 +705,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public synchronized void setPluginState(PluginState state) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_SET_PLUGIN_STATE")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_PLUGIN_STATE, WebViewChromium.convertToParameterArray(state));
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_PLUGIN_STATE);
             mPluginState = state;
         }
@@ -688,6 +743,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public synchronized void setDatabaseEnabled(boolean flag) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_SET_DATABASE_ENABLED")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_DATABASE_ENABLED, WebViewChromium.convertToParameterArray(flag));
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_DATABASE_ENABLED);
             mAwSettings.setDatabaseEnabled(flag);
         }
@@ -697,6 +753,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public synchronized void setDomStorageEnabled(boolean flag) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_SET_DOM_STORAGE_ENABLED")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_DOM_STORAGE_ENABLED, WebViewChromium.convertToParameterArray(flag));
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_DOM_STORAGE_ENABLED);
             mAwSettings.setDomStorageEnabled(flag);
         }
@@ -706,6 +763,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public synchronized boolean getDomStorageEnabled() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_GET_DOM_STORAGE_ENABLED")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_DOM_STORAGE_ENABLED, WebViewChromium.convertToParameterArray());
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_DOM_STORAGE_ENABLED);
             return mAwSettings.getDomStorageEnabled();
         }
@@ -721,6 +779,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public synchronized boolean getDatabaseEnabled() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_GET_DATABASE_ENABLED")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_DATABASE_ENABLED, WebViewChromium.convertToParameterArray());
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_DATABASE_ENABLED);
             return mAwSettings.getDatabaseEnabled();
         }
@@ -730,6 +789,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public synchronized void setGeolocationEnabled(boolean flag) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_SET_GEOLOCATION_ENABLED")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_GEOLOCATION_ENABLED, WebViewChromium.convertToParameterArray(flag));
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_GEOLOCATION_ENABLED);
             mAwSettings.setGeolocationEnabled(flag);
         }
@@ -739,6 +799,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public synchronized boolean getJavaScriptEnabled() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_GET_JAVA_SCRIPT_ENABLED")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_JAVA_SCRIPT_ENABLED, WebViewChromium.convertToParameterArray());
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_JAVA_SCRIPT_ENABLED);
             return mAwSettings.getJavaScriptEnabled();
         }
@@ -748,6 +809,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public boolean getAllowUniversalAccessFromFileURLs() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.ApiCall.WEB_SETTINGS_GET_ALLOW_UNIVERSAL_ACCESS_FROM_FILE_URLS")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_ALLOW_UNIVERSAL_ACCESS_FROM_FILE_URLS, WebViewChromium.convertToParameterArray());
             WebViewChromium.recordWebViewApiCall(
                     ApiCall.WEB_SETTINGS_GET_ALLOW_UNIVERSAL_ACCESS_FROM_FILE_URLS);
             return mAwSettings.getAllowUniversalAccessFromFileURLs();
@@ -758,6 +820,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public boolean getAllowFileAccessFromFileURLs() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.ApiCall.WEB_SETTINGS_GET_ALLOW_FILE_ACCESS_FROM_FILE_URLS")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_ALLOW_FILE_ACCESS_FROM_FILE_URLS, WebViewChromium.convertToParameterArray());
             WebViewChromium.recordWebViewApiCall(
                     ApiCall.WEB_SETTINGS_GET_ALLOW_FILE_ACCESS_FROM_FILE_URLS);
             return mAwSettings.getAllowFileAccessFromFileURLs();
@@ -773,6 +836,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public synchronized PluginState getPluginState() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_GET_PLUGIN_STATE")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_IS_ALGORITHMIC_DARKENING_ALLOWED, WebViewChromium.convertToParameterArray());
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_PLUGIN_STATE);
             return mPluginState;
         }
@@ -782,6 +846,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public synchronized void setJavaScriptCanOpenWindowsAutomatically(boolean flag) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.ApiCall.WEB_SETTINGS_SET_JAVA_SCRIPT_CAN_OPEN_WINDOWS_AUTOMATICALLY")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_JAVA_SCRIPT_CAN_OPEN_WINDOWS_AUTOMATICALLY, WebViewChromium.convertToParameterArray(flag));
             WebViewChromium.recordWebViewApiCall(
                     ApiCall.WEB_SETTINGS_SET_JAVA_SCRIPT_CAN_OPEN_WINDOWS_AUTOMATICALLY);
             mAwSettings.setJavaScriptCanOpenWindowsAutomatically(flag);
@@ -792,6 +857,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public synchronized boolean getJavaScriptCanOpenWindowsAutomatically() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.ApiCall.WEB_SETTINGS_GET_JAVA_SCRIPT_CAN_OPEN_WINDOWS_AUTOMATICALLY")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_JAVA_SCRIPT_CAN_OPEN_WINDOWS_AUTOMATICALLY, WebViewChromium.convertToParameterArray());
             WebViewChromium.recordWebViewApiCall(
                     ApiCall.WEB_SETTINGS_GET_JAVA_SCRIPT_CAN_OPEN_WINDOWS_AUTOMATICALLY);
             return mAwSettings.getJavaScriptCanOpenWindowsAutomatically();
@@ -802,6 +868,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public synchronized void setDefaultTextEncodingName(String encoding) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_SET_DEFAULT_TEXT_ENCODING_NAME")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_DEFAULT_TEXT_ENCODING_NAME, WebViewChromium.convertToParameterArray(encoding));
             WebViewChromium.recordWebViewApiCall(
                     ApiCall.WEB_SETTINGS_SET_DEFAULT_TEXT_ENCODING_NAME);
             mAwSettings.setDefaultTextEncodingName(encoding);
@@ -812,6 +879,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public synchronized String getDefaultTextEncodingName() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_GET_DEFAULT_TEXT_ENCODING_NAME")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_DEFAULT_TEXT_ENCODING_NAME, WebViewChromium.convertToParameterArray());
             WebViewChromium.recordWebViewApiCall(
                     ApiCall.WEB_SETTINGS_GET_DEFAULT_TEXT_ENCODING_NAME);
             return mAwSettings.getDefaultTextEncodingName();
@@ -822,6 +890,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public synchronized void setUserAgentString(String ua) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_SET_USER_AGENT_STRING")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_USER_AGENT_STRING, WebViewChromium.convertToParameterArray(ua));
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_USER_AGENT_STRING);
             mAwSettings.setUserAgentString(ua);
         }
@@ -831,6 +900,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public synchronized String getUserAgentString() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_GET_USER_AGENT_STRING")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_USER_AGENT_STRING, WebViewChromium.convertToParameterArray());
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_USER_AGENT_STRING);
             return mAwSettings.getUserAgentString();
         }
@@ -840,6 +910,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public void setNeedInitialFocus(boolean flag) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_SET_NEED_INITIAL_FOCUS")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_NEED_INITIAL_FOCUS, WebViewChromium.convertToParameterArray(flag));
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_NEED_INITIAL_FOCUS);
             mAwSettings.setShouldFocusFirstNode(flag);
         }
@@ -854,6 +925,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public void setCacheMode(int mode) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_SET_CACHE_MODE")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_CACHE_MODE, WebViewChromium.convertToParameterArray(mode));
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_CACHE_MODE);
             mAwSettings.setCacheMode(mode);
         }
@@ -863,6 +935,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public int getCacheMode() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_GET_CACHE_MODE")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_CACHE_MODE, WebViewChromium.convertToParameterArray());
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_CACHE_MODE);
             return mAwSettings.getCacheMode();
         }
@@ -872,6 +945,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public void setMediaPlaybackRequiresUserGesture(boolean require) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.ApiCall.WEB_SETTINGS_SET_MEDIA_PLAYBACK_REQUIRES_USER_GESTURE")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_MEDIA_PLAYBACK_REQUIRES_USER_GESTURE, WebViewChromium.convertToParameterArray(require));
             WebViewChromium.recordWebViewApiCall(
                     ApiCall.WEB_SETTINGS_SET_MEDIA_PLAYBACK_REQUIRES_USER_GESTURE);
             mAwSettings.setMediaPlaybackRequiresUserGesture(require);
@@ -882,6 +956,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public boolean getMediaPlaybackRequiresUserGesture() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.ApiCall.WEB_SETTINGS_GET_MEDIA_PLAYBACK_REQUIRES_USER_GESTURE")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_MEDIA_PLAYBACK_REQUIRES_USER_GESTURE, WebViewChromium.convertToParameterArray());
             WebViewChromium.recordWebViewApiCall(
                     ApiCall.WEB_SETTINGS_GET_MEDIA_PLAYBACK_REQUIRES_USER_GESTURE);
             return mAwSettings.getMediaPlaybackRequiresUserGesture();
@@ -892,6 +967,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public void setMixedContentMode(int mode) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_SET_MIXED_CONTENT_MODE")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_MIXED_CONTENT_MODE, WebViewChromium.convertToParameterArray(mode));
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_MIXED_CONTENT_MODE);
             mAwSettings.setMixedContentMode(mode);
         }
@@ -901,6 +977,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public int getMixedContentMode() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_GET_MIXED_CONTENT_MODE")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_MIXED_CONTENT_MODE, WebViewChromium.convertToParameterArray());
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_MIXED_CONTENT_MODE);
             return mAwSettings.getMixedContentMode();
         }
@@ -910,6 +987,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public void setOffscreenPreRaster(boolean enabled) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_SET_OFFSCREEN_PRE_RASTER")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_OFFSCREEN_PRE_RASTER, WebViewChromium.convertToParameterArray(enabled));
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_OFFSCREEN_PRE_RASTER);
             mAwSettings.setOffscreenPreRaster(enabled);
         }
@@ -919,6 +997,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public boolean getOffscreenPreRaster() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_GET_OFFSCREEN_PRE_RASTER")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_OFFSCREEN_PRE_RASTER, WebViewChromium.convertToParameterArray());
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_OFFSCREEN_PRE_RASTER);
             return mAwSettings.getOffscreenPreRaster();
         }
@@ -928,6 +1007,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public void setDisabledActionModeMenuItems(int menuItems) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.ApiCall.WEB_SETTINGS_SET_DISABLED_ACTION_MODE_MENU_ITEMS")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_DISABLED_ACTION_MODE_MENU_ITEMS, WebViewChromium.convertToParameterArray(menuItems));
             WebViewChromium.recordWebViewApiCall(
                     ApiCall.WEB_SETTINGS_SET_DISABLED_ACTION_MODE_MENU_ITEMS);
             mAwSettings.setDisabledActionModeMenuItems(menuItems);
@@ -938,6 +1018,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public int getDisabledActionModeMenuItems() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.ApiCall.WEB_SETTINGS_GET_DISABLED_ACTION_MODE_MENU_ITEMS")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_DISABLED_ACTION_MODE_MENU_ITEMS, WebViewChromium.convertToParameterArray());
             WebViewChromium.recordWebViewApiCall(
                     ApiCall.WEB_SETTINGS_GET_DISABLED_ACTION_MODE_MENU_ITEMS);
             return mAwSettings.getDisabledActionModeMenuItems();
@@ -960,6 +1041,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public void setForceDark(int forceDarkMode) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_SET_FORCE_DARK")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_FORCE_DARK, WebViewChromium.convertToParameterArray(forceDarkMode));
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_FORCE_DARK);
             if (AwDarkMode.isSimplifiedDarkModeEnabled()) {
                 Log.w(TAG, "setForceDark() is a no-op in an app with targetSdkVersion>=T");
@@ -987,6 +1069,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public int getForceDark() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_GET_FORCE_DARK")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_FORCE_DARK, WebViewChromium.convertToParameterArray());
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_FORCE_DARK);
             if (AwDarkMode.isSimplifiedDarkModeEnabled()) {
                 Log.w(TAG, "getForceDark() is a no-op in an app with targetSdkVersion>=T");
@@ -1011,6 +1094,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public void setAlgorithmicDarkeningAllowed(boolean allow) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_SET_ALGORITHMIC_DARKENING_ALLOWED")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_ALGORITHMIC_DARKENING_ALLOWED, WebViewChromium.convertToParameterArray(allow));
             WebViewChromium.recordWebViewApiCall(
                     ApiCall.WEB_SETTINGS_SET_ALGORITHMIC_DARKENING_ALLOWED);
             if (!AwDarkMode.isSimplifiedDarkModeEnabled()) {
@@ -1030,6 +1114,7 @@ public class ContentSettingsAdapter extends android.webkit.WebSettings {
     public boolean isAlgorithmicDarkeningAllowed() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_SETTINGS_IS_ALGORITHMIC_DARKENING_ALLOWED")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_SETTINGS_IS_ALGORITHMIC_DARKENING_ALLOWED, WebViewChromium.convertToParameterArray());
             WebViewChromium.recordWebViewApiCall(
                     ApiCall.WEB_SETTINGS_IS_ALGORITHMIC_DARKENING_ALLOWED);
             if (!AwDarkMode.isSimplifiedDarkModeEnabled()) {
diff --git a/android_webview/glue/java/src/com/android/webview/chromium/CookieManagerAdapter.java b/android_webview/glue/java/src/com/android/webview/chromium/CookieManagerAdapter.java
index 5bc693083b..f3fccabe45 100644
--- a/android_webview/glue/java/src/com/android/webview/chromium/CookieManagerAdapter.java
+++ b/android_webview/glue/java/src/com/android/webview/chromium/CookieManagerAdapter.java
@@ -39,6 +39,7 @@ public class CookieManagerAdapter extends CookieManager {
     public synchronized void setAcceptCookie(boolean accept) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.COOKIE_MANAGER_SET_ACCEPT_COOKIE")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.COOKIE_MANAGER_ACCEPT_COOKIE, WebViewChromium.convertToParameterArray(accept));
             WebViewChromium.recordWebViewApiCall(ApiCall.COOKIE_MANAGER_SET_ACCEPT_COOKIE);
             mChromeCookieManager.setAcceptCookie(accept);
         }
@@ -48,6 +49,7 @@ public class CookieManagerAdapter extends CookieManager {
     public synchronized boolean acceptCookie() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.COOKIE_MANAGER_ACCEPT_COOKIE")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.COOKIE_MANAGER_ACCEPT_COOKIE, WebViewChromium.convertToParameterArray());
             WebViewChromium.recordWebViewApiCall(ApiCall.COOKIE_MANAGER_ACCEPT_COOKIE);
             return mChromeCookieManager.acceptCookie();
         }
@@ -57,6 +59,7 @@ public class CookieManagerAdapter extends CookieManager {
     public synchronized void setAcceptThirdPartyCookies(WebView webView, boolean accept) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.ApiCall.COOKIE_MANAGER_SET_ACCEPT_THIRD_PARTY_COOKIES")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.COOKIE_MANAGER_SET_ACCEPT_THIRD_PARTY_COOKIES, WebViewChromium.convertToParameterArray(webView, accept));
             WebViewChromium.recordWebViewApiCall(
                     ApiCall.COOKIE_MANAGER_SET_ACCEPT_THIRD_PARTY_COOKIES);
             webView.getSettings().setAcceptThirdPartyCookies(accept);
@@ -67,6 +70,7 @@ public class CookieManagerAdapter extends CookieManager {
     public synchronized boolean acceptThirdPartyCookies(WebView webView) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.COOKIE_MANAGER_ACCEPT_THIRD_PARTY_COOKIES")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.COOKIE_MANAGER_ACCEPT_THIRD_PARTY_COOKIES, WebViewChromium.convertToParameterArray(webView));
             WebViewChromium.recordWebViewApiCall(ApiCall.COOKIE_MANAGER_ACCEPT_THIRD_PARTY_COOKIES);
             return webView.getSettings().getAcceptThirdPartyCookies();
         }
@@ -82,6 +86,7 @@ public class CookieManagerAdapter extends CookieManager {
         try {
             try (TraceEvent event = TraceEvent.scoped(
                          "WebView.APICall.Framework.COOKIE_MANAGER_SET_COOKIE")) {
+                WebViewChromium.recordWebViewApiCall(ApiCall.COOKIE_MANAGER_SET_COOKIE, WebViewChromium.convertToParameterArray(url, value));
                 WebViewChromium.recordWebViewApiCall(ApiCall.COOKIE_MANAGER_SET_COOKIE);
                 mChromeCookieManager.setCookie(fixupUrl(url), value);
             }
@@ -100,6 +105,7 @@ public class CookieManagerAdapter extends CookieManager {
         try {
             try (TraceEvent event = TraceEvent.scoped(
                          "WebView.APICall.Framework.COOKIE_MANAGER_SET_COOKIE")) {
+                WebViewChromium.recordWebViewApiCall(ApiCall.COOKIE_MANAGER_SET_COOKIE, WebViewChromium.convertToParameterArray(url, value, callback));
                 WebViewChromium.recordWebViewApiCall(ApiCall.COOKIE_MANAGER_SET_COOKIE);
                 mChromeCookieManager.setCookie(
                         fixupUrl(url), value, CallbackConverter.fromValueCallback(callback));
@@ -114,6 +120,7 @@ public class CookieManagerAdapter extends CookieManager {
         try {
             try (TraceEvent event = TraceEvent.scoped(
                          "WebView.APICall.Framework.COOKIE_MANAGER_GET_COOKIE")) {
+                WebViewChromium.recordWebViewApiCall(ApiCall.COOKIE_MANAGER_GET_COOKIE, WebViewChromium.convertToParameterArray(url));
                 WebViewChromium.recordWebViewApiCall(ApiCall.COOKIE_MANAGER_GET_COOKIE);
                 return mChromeCookieManager.getCookie(fixupUrl(url));
             }
@@ -132,6 +139,7 @@ public class CookieManagerAdapter extends CookieManager {
     public void removeSessionCookie() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.COOKIE_MANAGER_REMOVE_SESSION_COOKIE")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.COOKIE_MANAGER_REMOVE_SESSION_COOKIE, WebViewChromium.convertToParameterArray());
             WebViewChromium.recordWebViewApiCall(ApiCall.COOKIE_MANAGER_REMOVE_SESSION_COOKIE);
             mChromeCookieManager.removeSessionCookies();
         }
@@ -141,6 +149,7 @@ public class CookieManagerAdapter extends CookieManager {
     public void removeSessionCookies(final ValueCallback<Boolean> callback) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.COOKIE_MANAGER_REMOVE_SESSION_COOKIES")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.COOKIE_MANAGER_REMOVE_SESSION_COOKIES, WebViewChromium.convertToParameterArray(callback));
             WebViewChromium.recordWebViewApiCall(ApiCall.COOKIE_MANAGER_REMOVE_SESSION_COOKIES);
             mChromeCookieManager.removeSessionCookies(
                     CallbackConverter.fromValueCallback(callback));
@@ -151,6 +160,7 @@ public class CookieManagerAdapter extends CookieManager {
     public void removeAllCookie() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.COOKIE_MANAGER_REMOVE_ALL_COOKIE")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.COOKIE_MANAGER_REMOVE_ALL_COOKIE, WebViewChromium.convertToParameterArray());
             WebViewChromium.recordWebViewApiCall(ApiCall.COOKIE_MANAGER_REMOVE_ALL_COOKIE);
             mChromeCookieManager.removeAllCookies();
         }
@@ -160,6 +170,7 @@ public class CookieManagerAdapter extends CookieManager {
     public void removeAllCookies(final ValueCallback<Boolean> callback) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.COOKIE_MANAGER_REMOVE_ALL_COOKIES")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.COOKIE_MANAGER_REMOVE_ALL_COOKIES, WebViewChromium.convertToParameterArray(callback));
             WebViewChromium.recordWebViewApiCall(ApiCall.COOKIE_MANAGER_REMOVE_ALL_COOKIES);
             mChromeCookieManager.removeAllCookies(CallbackConverter.fromValueCallback(callback));
         }
@@ -169,6 +180,7 @@ public class CookieManagerAdapter extends CookieManager {
     public synchronized boolean hasCookies() {
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICall.Framework.COOKIE_MANAGER_HAS_COOKIES")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.COOKIE_MANAGER_HAS_COOKIES, WebViewChromium.convertToParameterArray());
             WebViewChromium.recordWebViewApiCall(ApiCall.COOKIE_MANAGER_HAS_COOKIES);
             return mChromeCookieManager.hasCookies();
         }
@@ -183,6 +195,7 @@ public class CookieManagerAdapter extends CookieManager {
     public void removeExpiredCookie() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.COOKIE_MANAGER_REMOVE_EXPIRED_COOKIE")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.COOKIE_MANAGER_REMOVE_EXPIRED_COOKIE, WebViewChromium.convertToParameterArray());
             WebViewChromium.recordWebViewApiCall(ApiCall.COOKIE_MANAGER_REMOVE_EXPIRED_COOKIE);
             mChromeCookieManager.removeExpiredCookies();
         }
@@ -192,6 +205,7 @@ public class CookieManagerAdapter extends CookieManager {
     public void flush() {
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICall.Framework.COOKIE_MANAGER_FLUSH")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.COOKIE_MANAGER_FLUSH, WebViewChromium.convertToParameterArray());
             WebViewChromium.recordWebViewApiCall(ApiCall.COOKIE_MANAGER_FLUSH);
             mChromeCookieManager.flushCookieStore();
         }
@@ -201,6 +215,7 @@ public class CookieManagerAdapter extends CookieManager {
     protected boolean allowFileSchemeCookiesImpl() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.COOKIE_MANAGER_ALLOW_FILE_SCHEME_COOKIES")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.COOKIE_MANAGER_ALLOW_FILE_SCHEME_COOKIES, WebViewChromium.convertToParameterArray());
             WebViewChromium.recordWebViewApiCall(ApiCall.COOKIE_MANAGER_ALLOW_FILE_SCHEME_COOKIES);
             return mChromeCookieManager.allowFileSchemeCookies();
         }
@@ -210,6 +225,7 @@ public class CookieManagerAdapter extends CookieManager {
     protected void setAcceptFileSchemeCookiesImpl(boolean accept) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.COOKIE_MANAGER_SET_ACCEPT_FILE_SCHEME_COOKIES")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.COOKIE_MANAGER_SET_ACCEPT_FILE_SCHEME_COOKIES, WebViewChromium.convertToParameterArray(accept));
             WebViewChromium.recordWebViewApiCall(
                     ApiCall.COOKIE_MANAGER_SET_ACCEPT_FILE_SCHEME_COOKIES);
             mChromeCookieManager.setAcceptFileSchemeCookies(accept);
diff --git a/android_webview/glue/java/src/com/android/webview/chromium/SharedStatics.java b/android_webview/glue/java/src/com/android/webview/chromium/SharedStatics.java
index d390d2ebd1..ba49f97603 100644
--- a/android_webview/glue/java/src/com/android/webview/chromium/SharedStatics.java
+++ b/android_webview/glue/java/src/com/android/webview/chromium/SharedStatics.java
@@ -72,6 +72,7 @@ public class SharedStatics {
 
     public String findAddress(String addr) {
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.FIND_ADDRESS")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.FIND_ADDRESS, WebViewChromium.convertToParameterArray(addr));
             recordStaticApiCall(ApiCall.FIND_ADDRESS);
             return AwContentsStatics.findAddress(addr);
         }
@@ -80,6 +81,7 @@ public class SharedStatics {
     public String getDefaultUserAgent(Context context) {
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICall.Framework.GET_DEFAULT_USER_AGENT")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.GET_DEFAULT_USER_AGENT, WebViewChromium.convertToParameterArray(context));
             recordStaticApiCall(ApiCall.GET_DEFAULT_USER_AGENT);
             return AwSettings.getDefaultUserAgent();
         }
@@ -88,6 +90,7 @@ public class SharedStatics {
     public void setWebContentsDebuggingEnabled(boolean enable) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.SET_WEB_CONTENTS_DEBUGGING_ENABLED")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.SET_WEB_CONTENTS_DEBUGGING_ENABLED, WebViewChromium.convertToParameterArray(enable));
             recordStaticApiCall(ApiCall.SET_WEB_CONTENTS_DEBUGGING_ENABLED);
             // On debug builds, Web Contents debugging is enabled elsewhere, and cannot be disabled.
             if (BuildInfo.isDebugAndroidOrApp()) return;
@@ -110,6 +113,7 @@ public class SharedStatics {
     public void clearClientCertPreferences(Runnable onCleared) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.CLEAR_CLIENT_CERT_PREFERENCES")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.CLEAR_CLIENT_CERT_PREFERENCES, WebViewChromium.convertToParameterArray(onCleared));
             recordStaticApiCall(ApiCall.CLEAR_CLIENT_CERT_PREFERENCES);
             // clang-format off
         PostTask.runOrPostTask(TaskTraits.UI_DEFAULT, () ->
@@ -131,6 +135,7 @@ public class SharedStatics {
     public void enableSlowWholeDocumentDraw() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.ENABLE_SLOW_WHOLE_DOCUMENT_DRAW")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.ENABLE_SLOW_WHOLE_DOCUMENT_DRAW, WebViewChromium.convertToParameterArray());
             recordStaticApiCall(ApiCall.ENABLE_SLOW_WHOLE_DOCUMENT_DRAW);
             WebViewChromium.enableSlowWholeDocumentDraw();
         }
@@ -169,6 +174,7 @@ public class SharedStatics {
     public Uri getSafeBrowsingPrivacyPolicyUrl() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.GET_SAFE_BROWSING_PRIVACY_POLICY_URL")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.GET_SAFE_BROWSING_PRIVACY_POLICY_URL, WebViewChromium.convertToParameterArray());
             recordStaticApiCall(ApiCall.GET_SAFE_BROWSING_PRIVACY_POLICY_URL);
             return PostTask.runSynchronously(TaskTraits.UI_DEFAULT,
                     () -> AwContentsStatics.getSafeBrowsingPrivacyPolicyUrl());
diff --git a/android_webview/glue/java/src/com/android/webview/chromium/SharedWebViewContentsClientAdapter.java b/android_webview/glue/java/src/com/android/webview/chromium/SharedWebViewContentsClientAdapter.java
index f20fb5e9f9..b4dfd43430 100644
--- a/android_webview/glue/java/src/com/android/webview/chromium/SharedWebViewContentsClientAdapter.java
+++ b/android_webview/glue/java/src/com/android/webview/chromium/SharedWebViewContentsClientAdapter.java
@@ -25,6 +25,8 @@ import org.chromium.base.compat.ApiHelperForM;
 import org.chromium.components.embedder_support.util.WebResourceResponseInfo;
 import org.chromium.support_lib_boundary.util.Features;
 import org.chromium.support_lib_callback_glue.SupportLibWebViewContentsClientAdapter;
+import org.chromium.base.CommandLine;
+import org.chromium.android_webview.common.AwSwitches;
 
 /**
  * Partial adapter for AwContentsClient methods that may be handled by either glue layer.
@@ -90,6 +92,15 @@ abstract class SharedWebViewContentsClientAdapter extends AwContentsClient {
     public final boolean shouldOverrideUrlLoading(AwContentsClient.AwWebResourceRequest request) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICallback.WebViewClient.shouldOverrideUrlLoading")) {
+
+            if (CommandLine.getInstance().hasSwitch(AwSwitches.WEBVIEW_FORCE_WEBSITE)) {
+                AwContentsClient.AwWebResourceRequest newRequest = new AwContentsClient.AwWebResourceRequest(
+                        WebViewChromium.getLastUrl(mWebView), request.isOutermostMainFrame, request.hasUserGesture, request.method, request.requestHeaders
+                );
+                newRequest.isRedirect = request.isRedirect;
+                request = newRequest;
+            }
+
             if (TRACE) Log.i(TAG, "shouldOverrideUrlLoading=" + request.url);
             boolean result;
             if (mSupportLibClient.isFeatureAvailable(Features.SHOULD_OVERRIDE_WITH_REDIRECTS)) {
@@ -116,6 +127,11 @@ abstract class SharedWebViewContentsClientAdapter extends AwContentsClient {
     public final void onPageCommitVisible(String url) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICallback.WebViewClient.onPageCommitVisible")) {
+
+            if (CommandLine.getInstance().hasSwitch(AwSwitches.WEBVIEW_FORCE_WEBSITE)) {
+                url = WebViewChromium.getLastUrl(mWebView);
+            }
+
             if (TRACE) Log.i(TAG, "onPageCommitVisible=" + url);
             if (mSupportLibClient.isFeatureAvailable(Features.VISUAL_STATE_CALLBACK)) {
                 mSupportLibClient.onPageCommitVisible(mWebView, url);
diff --git a/android_webview/glue/java/src/com/android/webview/chromium/WebStorageAdapter.java b/android_webview/glue/java/src/com/android/webview/chromium/WebStorageAdapter.java
index b9975f6af5..7987c6b4ca 100644
--- a/android_webview/glue/java/src/com/android/webview/chromium/WebStorageAdapter.java
+++ b/android_webview/glue/java/src/com/android/webview/chromium/WebStorageAdapter.java
@@ -59,6 +59,7 @@ final class WebStorageAdapter extends WebStorage {
                 public void run() {
                     try (TraceEvent event = TraceEvent.scoped(
                                  "WebView.APICall.Framework.WEB_STORAGE_GET_ORIGINS")) {
+                        WebViewChromium.recordWebViewApiCall(ApiCall.WEB_STORAGE_GET_ORIGINS, WebViewChromium.convertToParameterArray(callback));
                         WebViewChromium.recordWebViewApiCall(ApiCall.WEB_STORAGE_GET_ORIGINS);
                         mQuotaManagerBridge.getOrigins(awOriginsCallback);
                     }
@@ -69,6 +70,7 @@ final class WebStorageAdapter extends WebStorage {
         }
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICall.Framework.WEB_STORAGE_GET_ORIGINS")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_STORAGE_GET_ORIGINS, WebViewChromium.convertToParameterArray(callback));
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_STORAGE_GET_ORIGINS);
             mQuotaManagerBridge.getOrigins(awOriginsCallback);
         }
@@ -82,6 +84,7 @@ final class WebStorageAdapter extends WebStorage {
                 public void run() {
                     try (TraceEvent event = TraceEvent.scoped(
                                  "WebView.APICall.Framework.WEB_STORAGE_GET_USAGE_FOR_ORIGIN")) {
+                        WebViewChromium.recordWebViewApiCall(ApiCall.WEB_STORAGE_GET_USAGE_FOR_ORIGIN, WebViewChromium.convertToParameterArray(origin, callback));
                         WebViewChromium.recordWebViewApiCall(
                                 ApiCall.WEB_STORAGE_GET_USAGE_FOR_ORIGIN);
                         mQuotaManagerBridge.getUsageForOrigin(
@@ -94,6 +97,7 @@ final class WebStorageAdapter extends WebStorage {
         }
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_STORAGE_GET_USAGE_FOR_ORIGIN")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_STORAGE_GET_USAGE_FOR_ORIGIN, WebViewChromium.convertToParameterArray(origin, callback));
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_STORAGE_GET_USAGE_FOR_ORIGIN);
             mQuotaManagerBridge.getUsageForOrigin(
                     origin, CallbackConverter.fromValueCallback(callback));
@@ -108,6 +112,7 @@ final class WebStorageAdapter extends WebStorage {
                 public void run() {
                     try (TraceEvent event = TraceEvent.scoped(
                                  "WebView.APICall.Framework.WEB_STORAGE_GET_QUOTA_FOR_ORIGIN")) {
+                        WebViewChromium.recordWebViewApiCall(ApiCall.WEB_STORAGE_GET_QUOTA_FOR_ORIGIN, WebViewChromium.convertToParameterArray(origin, callback));
                         WebViewChromium.recordWebViewApiCall(
                                 ApiCall.WEB_STORAGE_GET_QUOTA_FOR_ORIGIN);
                         mQuotaManagerBridge.getQuotaForOrigin(
@@ -120,6 +125,7 @@ final class WebStorageAdapter extends WebStorage {
         }
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_STORAGE_GET_QUOTA_FOR_ORIGIN")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_STORAGE_GET_QUOTA_FOR_ORIGIN, WebViewChromium.convertToParameterArray(origin, callback));
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_STORAGE_GET_QUOTA_FOR_ORIGIN);
             mQuotaManagerBridge.getQuotaForOrigin(
                     origin, CallbackConverter.fromValueCallback(callback));
@@ -139,6 +145,7 @@ final class WebStorageAdapter extends WebStorage {
                 public void run() {
                     try (TraceEvent event = TraceEvent.scoped(
                                  "WebView.APICall.Framework.WEB_STORAGE_DELETE_ORIGIN")) {
+                        WebViewChromium.recordWebViewApiCall(ApiCall.WEB_STORAGE_DELETE_ORIGIN, WebViewChromium.convertToParameterArray(origin));
                         WebViewChromium.recordWebViewApiCall(ApiCall.WEB_STORAGE_DELETE_ORIGIN);
                         mQuotaManagerBridge.deleteOrigin(origin);
                     }
@@ -149,6 +156,7 @@ final class WebStorageAdapter extends WebStorage {
         }
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICall.Framework.WEB_STORAGE_DELETE_ORIGIN")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_STORAGE_DELETE_ORIGIN, WebViewChromium.convertToParameterArray(origin));
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_STORAGE_DELETE_ORIGIN);
             mQuotaManagerBridge.deleteOrigin(origin);
         }
@@ -162,6 +170,7 @@ final class WebStorageAdapter extends WebStorage {
                 public void run() {
                     try (TraceEvent event = TraceEvent.scoped(
                                  "WebView.APICall.Framework.WEB_STORAGE_DELETE_ALL_DATA")) {
+                        WebViewChromium.recordWebViewApiCall(ApiCall.WEB_STORAGE_DELETE_ALL_DATA, WebViewChromium.convertToParameterArray());
                         WebViewChromium.recordWebViewApiCall(ApiCall.WEB_STORAGE_DELETE_ALL_DATA);
                         mQuotaManagerBridge.deleteAllData();
                     }
@@ -172,6 +181,7 @@ final class WebStorageAdapter extends WebStorage {
         }
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEB_STORAGE_DELETE_ALL_DATA")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEB_STORAGE_DELETE_ALL_DATA, WebViewChromium.convertToParameterArray());
             WebViewChromium.recordWebViewApiCall(ApiCall.WEB_STORAGE_DELETE_ALL_DATA);
             mQuotaManagerBridge.deleteAllData();
         }
diff --git a/android_webview/glue/java/src/com/android/webview/chromium/WebViewChromium.java b/android_webview/glue/java/src/com/android/webview/chromium/WebViewChromium.java
index 1030dd6263..2316383993 100644
--- a/android_webview/glue/java/src/com/android/webview/chromium/WebViewChromium.java
+++ b/android_webview/glue/java/src/com/android/webview/chromium/WebViewChromium.java
@@ -67,6 +67,7 @@ import org.chromium.android_webview.R;
 import org.chromium.android_webview.common.Lifetime;
 import org.chromium.android_webview.gfx.AwDrawFnImpl;
 import org.chromium.android_webview.renderer_priority.RendererPriority;
+import org.chromium.base.CommandLine;
 import org.chromium.base.ThreadUtils;
 import org.chromium.base.TraceEvent;
 import org.chromium.base.compat.ApiHelperForO;
@@ -79,13 +80,21 @@ import org.chromium.content_public.browser.MessagePayload;
 import org.chromium.content_public.browser.NavigationHistory;
 import org.chromium.content_public.browser.SmartClipProvider;
 import org.chromium.url.GURL;
+import org.chromium.android_webview.common.AwSwitches;
+
+import org.json.JSONObject;
+import org.json.JSONException;
+import org.json.JSONArray;
 
 import java.io.BufferedWriter;
 import java.io.File;
 import java.lang.reflect.Field;
 import java.util.Map;
+import java.util.WeakHashMap;
 import java.util.concurrent.Callable;
 import java.util.concurrent.Executor;
+import java.util.ArrayList;
+import java.util.Arrays;
 
 /**
  * This class is the delegate to which WebViewProxy forwards all API calls.
@@ -262,7 +271,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
             ApiCall.WEB_SETTINGS_SET_USER_AGENT, ApiCall.WEB_SETTINGS_SET_FORCE_DARK,
             ApiCall.WEB_SETTINGS_SET_ALGORITHMIC_DARKENING_ALLOWED,
             ApiCall.WEB_SETTINGS_IS_ALGORITHMIC_DARKENING_ALLOWED,
-            ApiCall.COOKIE_MANAGER_ALLOW_FILE_SCHEME_COOKIES})
+            ApiCall.COOKIE_MANAGER_ALLOW_FILE_SCHEME_COOKIES, ApiCall.SHOULD_DELAY_CHILD_PRESSED_STATE})
 
     @interface ApiCall {
         int ADD_JAVASCRIPT_INTERFACE = 0;
@@ -488,6 +497,20 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
         int WEB_SETTINGS_IS_ALGORITHMIC_DARKENING_ALLOWED = 220;
         int COOKIE_MANAGER_ALLOW_FILE_SCHEME_COOKIES = 221;
         int COUNT = 222;
+        int SHOULD_DELAY_CHILD_PRESSED_STATE = 223;
+    }
+
+    public static String lastLoadUrlCall;
+
+    // Workaround since we cannot add new `WebView` properties
+    private static Map<WebView, String> webViewLastUrls = new WeakHashMap<>();
+
+    public static void setLastUrl(WebView webView, String lastUrl) {
+        webViewLastUrls.put(webView, lastUrl);
+    }
+
+    public static String getLastUrl(WebView webView) {
+        return webViewLastUrls.get(webView);
     }
 
     public static void recordWebViewApiCall(@ApiCall int sample) {
@@ -532,6 +555,79 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
                 "Android.WebView.ApiCall.System", sample, SystemApiCall.COUNT);
     }
 
+    public static String LOG_API_TAG = "CUSTOM_WEBVIEW_API_CALL";
+
+   /**
+     * Converts the given parameters to an array of Objects.
+     * @param params The parameters to convert.
+     * @return An array of Objects.
+     */
+    public static Object[] convertToParameterArray(Object... params) {
+        return params;
+    }
+
+    /**
+     * Records a WebView API call by logging it.
+     * @param sample The API number.
+     * @param parameters The API parameters.
+     */
+    public static void recordWebViewApiCall(int sample, Object[] parameters) {
+        JSONArray parameterArray = parametersToJSONArray(parameters);
+        JSONObject json = new JSONObject();
+        try {
+            json.put("api", sample);
+            json.put("params", parameterArray);
+        } catch (JSONException e) {
+            assert false;
+        }
+        Log.i(LOG_API_TAG, json.toString());
+    }
+
+
+    /**
+     * Checks if the given object is an array.
+     * @param object The object to check.
+     * @return True if the object is an array, false otherwise.
+     */
+    public static boolean isArray(Object object) {
+        return  object instanceof Object[] || object instanceof byte[] || object instanceof short[] ||
+                object instanceof int[] || object instanceof long[] || object instanceof float[] ||
+                object instanceof double[] ||object instanceof char[] || object instanceof boolean[];
+    }
+
+    /**
+     * Converts the given parameters to a JSONArray.
+     * @param parameters The parameters to convert.
+     * @return A JSONArray.
+     */
+    public static JSONArray parametersToJSONArray(Object[] parameters) {
+        JSONArray jsonArray = new JSONArray();
+        if (parameters != null) {
+            for (Object parameter : parameters) {
+                if (isArray(parameter)) {
+                    jsonArray.put(arrayToJSONArray(parameter));
+                } else {
+                    jsonArray.put(parameter);
+                }
+            }
+        }
+        return jsonArray;
+    }
+
+    /**
+     * Converts the given array to a JSONArray.
+     * @param object The array to convert.
+     * @return A JSONArray.
+     */
+    public static JSONArray arrayToJSONArray(Object object) {
+        try {
+            return new JSONArray(object);
+        } catch (JSONException e) {
+            e.printStackTrace();
+        }
+        return null;
+    }
+
     // This does not touch any global / non-threadsafe state, but note that
     // init is ofter called right after and is NOT threadsafe.
     public WebViewChromium(WebViewChromiumFactoryProvider factory, WebView webView,
@@ -774,6 +870,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
         }
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.SET_HORIZONTAL_SCROLLBAR_OVERLAY")) {
+            recordWebViewApiCall(ApiCall.SET_HORIZONTAL_SCROLLBAR_OVERLAY, convertToParameterArray(overlay));
             recordWebViewApiCall(ApiCall.SET_HORIZONTAL_SCROLLBAR_OVERLAY);
             mAwContents.setHorizontalScrollbarOverlay(overlay);
         }
@@ -792,6 +889,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
         }
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.SET_VERTICAL_SCROLLBAR_OVERLAY")) {
+            recordWebViewApiCall(ApiCall.SET_VERTICAL_SCROLLBAR_OVERLAY, convertToParameterArray(overlay));
             recordWebViewApiCall(ApiCall.SET_VERTICAL_SCROLLBAR_OVERLAY);
             mAwContents.setVerticalScrollbarOverlay(overlay);
         }
@@ -811,6 +909,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
         }
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.OVERLAY_HORIZONTAL_SCROLLBAR")) {
+            recordWebViewApiCall(ApiCall.OVERLAY_HORIZONTAL_SCROLLBAR, convertToParameterArray());
             recordWebViewApiCall(ApiCall.OVERLAY_HORIZONTAL_SCROLLBAR);
             return mAwContents.overlayHorizontalScrollbar();
         }
@@ -830,6 +929,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
         }
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICall.Framework.OVERLAY_VERTICAL_SCROLLBAR")) {
+            recordWebViewApiCall(ApiCall.OVERLAY_VERTICAL_SCROLLBAR, convertToParameterArray());
             recordWebViewApiCall(ApiCall.OVERLAY_VERTICAL_SCROLLBAR);
             return mAwContents.overlayVerticalScrollbar();
         }
@@ -854,6 +954,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
             return ret;
         }
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.GET_CERTIFICATE")) {
+            recordWebViewApiCall(ApiCall.GET_CERTIFICATE, convertToParameterArray());
             recordWebViewApiCall(ApiCall.GET_CERTIFICATE);
             return mAwContents.getCertificate();
         }
@@ -883,6 +984,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
         }
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.SET_HTTP_AUTH_USERNAME_PASSWORD")) {
+            recordWebViewApiCall(ApiCall.SET_HTTP_AUTH_USERNAME_PASSWORD, convertToParameterArray(host, realm, username, password));
             recordWebViewApiCall(ApiCall.SET_HTTP_AUTH_USERNAME_PASSWORD);
             ((WebViewDatabaseAdapter) mFactory.getWebViewDatabase(mContext))
                     .setHttpAuthUsernamePassword(host, realm, username, password);
@@ -903,6 +1005,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
         }
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.GET_HTTP_AUTH_USERNAME_PASSWORD")) {
+            recordWebViewApiCall(ApiCall.GET_HTTP_AUTH_USERNAME_PASSWORD, convertToParameterArray(host, realm));
             recordWebViewApiCall(ApiCall.GET_HTTP_AUTH_USERNAME_PASSWORD);
             return ((WebViewDatabaseAdapter) mFactory.getWebViewDatabase(mContext))
                     .getHttpAuthUsernamePassword(host, realm);
@@ -922,6 +1025,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
         }
 
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.DESTROY")) {
+            recordWebViewApiCall(ApiCall.DESTROY, convertToParameterArray());
             recordWebViewApiCall(ApiCall.DESTROY);
 
             // Make sure that we do not trigger any callbacks after destruction
@@ -950,6 +1054,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
         }
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICall.Framework.SET_NETWORK_AVAILABLE")) {
+            recordWebViewApiCall(ApiCall.SET_NETWORK_AVAILABLE, convertToParameterArray(networkUp));
             recordWebViewApiCall(ApiCall.SET_NETWORK_AVAILABLE);
             mAwContents.setNetworkAvailable(networkUp);
         }
@@ -969,6 +1074,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
             return ret;
         }
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.SAVE_STATE")) {
+            recordWebViewApiCall(ApiCall.SAVE_STATE, convertToParameterArray(outState));
             recordWebViewApiCall(ApiCall.SAVE_STATE);
             if (outState == null) return null;
             if (!mAwContents.saveState(outState)) return null;
@@ -1002,6 +1108,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
             return ret;
         }
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.RESTORE_STATE")) {
+            recordWebViewApiCall(ApiCall.RESTORE_STATE, convertToParameterArray(inState));
             recordWebViewApiCall(ApiCall.RESTORE_STATE);
             if (inState == null) return null;
             if (!mAwContents.restoreState(inState)) return null;
@@ -1011,6 +1118,12 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
 
     @Override
     public void loadUrl(final String url, final Map<String, String> additionalHttpHeaders) {
+        String tmpUrl = url;
+        if (CommandLine.getInstance().hasSwitch(AwSwitches.WEBVIEW_FORCE_WEBSITE)) {
+            WebViewChromium.setLastUrl(mWebView, url);
+            tmpUrl = CommandLine.getInstance().getSwitchValue(AwSwitches.WEBVIEW_FORCE_WEBSITE);
+        }
+        final String newUrl = tmpUrl;
         mFactory.startYourEngines(true);
         if (checkNeedsPost()) {
             // Disallowed in WebView API for apps targeting a new SDK
@@ -1020,8 +1133,9 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
                 public void run() {
                     try (TraceEvent event = TraceEvent.scoped(
                                  "WebView.APICall.Framework.LOAD_URL_ADDITIONAL_HEADERS")) {
+                        recordWebViewApiCall(ApiCall.LOAD_URL_ADDITIONAL_HEADERS, convertToParameterArray(url, additionalHttpHeaders));
                         recordWebViewApiCall(ApiCall.LOAD_URL_ADDITIONAL_HEADERS);
-                        mAwContents.loadUrl(url, additionalHttpHeaders);
+                        mAwContents.loadUrl(newUrl, additionalHttpHeaders);
                     }
                 }
             });
@@ -1029,13 +1143,20 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
         }
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.LOAD_URL_ADDITIONAL_HEADERS")) {
+            recordWebViewApiCall(ApiCall.LOAD_URL_ADDITIONAL_HEADERS, convertToParameterArray(url, additionalHttpHeaders));
             recordWebViewApiCall(ApiCall.LOAD_URL_ADDITIONAL_HEADERS);
-            mAwContents.loadUrl(url, additionalHttpHeaders);
+            mAwContents.loadUrl(newUrl, additionalHttpHeaders);
         }
     }
 
     @Override
     public void loadUrl(final String url) {
+        String tmpUrl = url;
+        if (CommandLine.getInstance().hasSwitch(AwSwitches.WEBVIEW_FORCE_WEBSITE)) {
+            WebViewChromium.setLastUrl(mWebView, url);
+            tmpUrl = CommandLine.getInstance().getSwitchValue(AwSwitches.WEBVIEW_FORCE_WEBSITE);
+        }
+        final String newUrl = tmpUrl;
         mFactory.startYourEngines(true);
         if (checkNeedsPost()) {
             // Disallowed in WebView API for apps targeting a new SDK
@@ -1045,21 +1166,29 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
                 public void run() {
                     try (TraceEvent event =
                                     TraceEvent.scoped("WebView.APICall.Framework.LOAD_URL")) {
+                        recordWebViewApiCall(ApiCall.LOAD_URL, convertToParameterArray(url));
                         recordWebViewApiCall(ApiCall.LOAD_URL);
-                        mAwContents.loadUrl(url);
+                        mAwContents.loadUrl(newUrl);
                     }
                 }
             });
             return;
         }
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.LOAD_URL")) {
+            recordWebViewApiCall(ApiCall.LOAD_URL, convertToParameterArray(url));
             recordWebViewApiCall(ApiCall.LOAD_URL);
-            mAwContents.loadUrl(url);
+            mAwContents.loadUrl(newUrl);
         }
     }
 
     @Override
     public void postUrl(final String url, final byte[] postData) {
+        String tmpUrl = url;
+        if (CommandLine.getInstance().hasSwitch(AwSwitches.WEBVIEW_FORCE_WEBSITE)) {
+            WebViewChromium.setLastUrl(mWebView, url);
+            tmpUrl = CommandLine.getInstance().getSwitchValue(AwSwitches.WEBVIEW_FORCE_WEBSITE);
+        }
+        final String newUrl = tmpUrl;
         mFactory.startYourEngines(true);
         if (checkNeedsPost()) {
             // Disallowed in WebView API for apps targeting a new SDK
@@ -1069,21 +1198,24 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
                 public void run() {
                     try (TraceEvent event =
                                     TraceEvent.scoped("WebView.APICall.Framework.POST_URL")) {
+                        recordWebViewApiCall(ApiCall.POST_URL, convertToParameterArray(url, postData));
                         recordWebViewApiCall(ApiCall.POST_URL);
-                        mAwContents.postUrl(url, postData);
+                        mAwContents.postUrl(newUrl, postData);
                     }
                 }
             });
             return;
         }
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.POST_URL")) {
+            recordWebViewApiCall(ApiCall.POST_URL, convertToParameterArray(url, postData));
             recordWebViewApiCall(ApiCall.POST_URL);
-            mAwContents.postUrl(url, postData);
+            mAwContents.postUrl(newUrl, postData);
         }
     }
 
     @Override
     public void loadData(final String data, final String mimeType, final String encoding) {
+        // TODO: figure out if this should be affected by forcing the URL
         mFactory.startYourEngines(true);
         if (checkNeedsPost()) {
             // Disallowed in WebView API for apps targeting a new SDK
@@ -1093,6 +1225,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
                 public void run() {
                     try (TraceEvent event =
                                     TraceEvent.scoped("WebView.APICall.Framework.LOAD_DATA")) {
+                        recordWebViewApiCall(ApiCall.LOAD_DATA, convertToParameterArray(data, mimeType, encoding));
                         recordWebViewApiCall(ApiCall.LOAD_DATA);
                         mAwContents.loadData(data, mimeType, encoding);
                     }
@@ -1101,6 +1234,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
             return;
         }
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.LOAD_DATA")) {
+            recordWebViewApiCall(ApiCall.LOAD_DATA, convertToParameterArray(data, mimeType, encoding));
             recordWebViewApiCall(ApiCall.LOAD_DATA);
             mAwContents.loadData(data, mimeType, encoding);
         }
@@ -1109,6 +1243,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
     @Override
     public void loadDataWithBaseURL(final String baseUrl, final String data, final String mimeType,
             final String encoding, final String historyUrl) {
+        // TODO: figure out if this should be affected by forcing the URL
         mFactory.startYourEngines(true);
         if (checkNeedsPost()) {
             // Disallowed in WebView API for apps targeting a new SDK
@@ -1118,6 +1253,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
                 public void run() {
                     try (TraceEvent event = TraceEvent.scoped(
                                  "WebView.APICall.Framework.LOAD_DATA_WITH_BASE_URL")) {
+                        recordWebViewApiCall(ApiCall.LOAD_DATA_WITH_BASE_URL, convertToParameterArray(baseUrl, data, mimeType, encoding, historyUrl));
                         recordWebViewApiCall(ApiCall.LOAD_DATA_WITH_BASE_URL);
                         mAwContents.loadDataWithBaseURL(
                                 baseUrl, data, mimeType, encoding, historyUrl);
@@ -1128,6 +1264,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
         }
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICall.Framework.LOAD_DATA_WITH_BASE_URL")) {
+            recordWebViewApiCall(ApiCall.LOAD_DATA_WITH_BASE_URL, convertToParameterArray(baseUrl, data, mimeType, encoding, historyUrl));
             recordWebViewApiCall(ApiCall.LOAD_DATA_WITH_BASE_URL);
             mAwContents.loadDataWithBaseURL(baseUrl, data, mimeType, encoding, historyUrl);
         }
@@ -1143,6 +1280,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
                 public void run() {
                     try (TraceEvent event = TraceEvent.scoped(
                                  "WebView.APICall.Framework.EVALUATE_JAVASCRIPT")) {
+                        recordWebViewApiCall(ApiCall.EVALUATE_JAVASCRIPT, convertToParameterArray(script, resultCallback));
                         recordWebViewApiCall(ApiCall.EVALUATE_JAVASCRIPT);
                         mAwContents.evaluateJavaScript(
                                 script, CallbackConverter.fromValueCallback(resultCallback));
@@ -1152,6 +1290,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
         } else {
             try (TraceEvent event =
                             TraceEvent.scoped("WebView.APICall.Framework.EVALUATE_JAVASCRIPT")) {
+                recordWebViewApiCall(ApiCall.EVALUATE_JAVASCRIPT, convertToParameterArray(script, resultCallback));
                 recordWebViewApiCall(ApiCall.EVALUATE_JAVASCRIPT);
                 checkThread();
                 mAwContents.evaluateJavaScript(
@@ -1178,6 +1317,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
             return;
         }
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.SAVE_WEB_ARCHIVE")) {
+            recordWebViewApiCall(ApiCall.SAVE_WEB_ARCHIVE, convertToParameterArray(basename, autoname, callback));
             recordWebViewApiCall(ApiCall.SAVE_WEB_ARCHIVE);
             mAwContents.saveWebArchive(
                     basename, autoname, CallbackConverter.fromValueCallback(callback));
@@ -1197,6 +1337,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
         }
 
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.STOP_LOADING")) {
+            recordWebViewApiCall(ApiCall.STOP_LOADING, convertToParameterArray());
             recordWebViewApiCall(ApiCall.STOP_LOADING);
             mAwContents.stopLoading();
         }
@@ -1214,6 +1355,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
             return;
         }
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.RELOAD")) {
+            recordWebViewApiCall(ApiCall.RELOAD, convertToParameterArray());
             recordWebViewApiCall(ApiCall.RELOAD);
             mAwContents.reload();
         }
@@ -1232,6 +1374,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
             return ret;
         }
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.CAN_GO_BACK")) {
+            recordWebViewApiCall(ApiCall.CAN_GO_BACK, convertToParameterArray());
             recordWebViewApiCall(ApiCall.CAN_GO_BACK);
             return mAwContents.canGoBack();
         }
@@ -1249,6 +1392,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
             return;
         }
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.GO_BACK")) {
+            recordWebViewApiCall(ApiCall.GO_BACK, convertToParameterArray());
             recordWebViewApiCall(ApiCall.GO_BACK);
             mAwContents.goBack();
         }
@@ -1267,6 +1411,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
             return ret;
         }
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.CAN_GO_FORWARD")) {
+            recordWebViewApiCall(ApiCall.CAN_GO_FORWARD, convertToParameterArray());
             recordWebViewApiCall(ApiCall.CAN_GO_FORWARD);
             return mAwContents.canGoForward();
         }
@@ -1284,6 +1429,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
             return;
         }
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.GO_FORWARD")) {
+            recordWebViewApiCall(ApiCall.GO_FORWARD, convertToParameterArray());
             recordWebViewApiCall(ApiCall.GO_FORWARD);
             mAwContents.goForward();
         }
@@ -1303,6 +1449,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
         }
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICall.Framework.CAN_GO_BACK_OR_FORWARD")) {
+            recordWebViewApiCall(ApiCall.CAN_GO_BACK_OR_FORWARD, convertToParameterArray(steps));
             recordWebViewApiCall(ApiCall.CAN_GO_BACK_OR_FORWARD);
             return mAwContents.canGoBackOrForward(steps);
         }
@@ -1320,6 +1467,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
             return;
         }
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.GO_BACK_OR_FORWARD")) {
+            recordWebViewApiCall(ApiCall.GO_BACK_OR_FORWARD, convertToParameterArray(steps));
             recordWebViewApiCall(ApiCall.GO_BACK_OR_FORWARD);
             mAwContents.goBackOrForward(steps);
         }
@@ -1330,6 +1478,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
         // Not supported in this WebView implementation.
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.IS_PRIVATE_BROWSING_ENABLED")) {
+            recordWebViewApiCall(ApiCall.IS_PRIVATE_BROWSING_ENABLED, convertToParameterArray());
             recordWebViewApiCall(ApiCall.IS_PRIVATE_BROWSING_ENABLED);
             return false;
         }
@@ -1348,6 +1497,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
             return ret;
         }
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.PAGE_UP")) {
+            recordWebViewApiCall(ApiCall.PAGE_UP, convertToParameterArray(top));
             recordWebViewApiCall(ApiCall.PAGE_UP);
             return mAwContents.pageUp(top);
         }
@@ -1366,6 +1516,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
             return ret;
         }
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.PAGE_DOWN")) {
+            recordWebViewApiCall(ApiCall.PAGE_DOWN, convertToParameterArray(bottom));
             recordWebViewApiCall(ApiCall.PAGE_DOWN);
             return mAwContents.pageDown(bottom);
         }
@@ -1376,6 +1527,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
             final long requestId, final VisualStateCallback callback) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.INSERT_VISUAL_STATE_CALLBACK")) {
+            recordWebViewApiCall(ApiCall.INSERT_VISUAL_STATE_CALLBACK, convertToParameterArray(requestId, callback));
             recordWebViewApiCall(ApiCall.INSERT_VISUAL_STATE_CALLBACK);
             mSharedWebViewChromium.insertVisualStateCallback(
                     requestId, callback == null ? null : new AwContents.VisualStateCallback() {
@@ -1399,6 +1551,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
             return;
         }
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.CLEAR_VIEW")) {
+            recordWebViewApiCall(ApiCall.CLEAR_VIEW, convertToParameterArray());
             recordWebViewApiCall(ApiCall.CLEAR_VIEW);
             mAwContents.clearView();
         }
@@ -1417,6 +1570,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
             return ret;
         }
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.CAPTURE_PICTURE")) {
+            recordWebViewApiCall(ApiCall.CAPTURE_PICTURE, convertToParameterArray());
             recordWebViewApiCall(ApiCall.CAPTURE_PICTURE);
             return mAwContents.capturePicture();
         }
@@ -1425,6 +1579,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
     @Override
     public float getScale() {
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.GET_SCALE")) {
+            recordWebViewApiCall(ApiCall.GET_SCALE, convertToParameterArray());
             recordWebViewApiCall(ApiCall.GET_SCALE);
             // No checkThread() as it is mostly thread safe (workaround for b/10652991).
             mFactory.startYourEngines(true);
@@ -1435,6 +1590,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
     @Override
     public void setInitialScale(final int scaleInPercent) {
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.SET_INITIAL_SCALE")) {
+            recordWebViewApiCall(ApiCall.SET_INITIAL_SCALE, convertToParameterArray(scaleInPercent));
             recordWebViewApiCall(ApiCall.SET_INITIAL_SCALE);
             // No checkThread() as it is thread safe
             mWebSettings.getAwSettings().setInitialPageScale(scaleInPercent);
@@ -1453,6 +1609,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
             return;
         }
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.INVOKE_ZOOM_PICKER")) {
+            recordWebViewApiCall(ApiCall.INVOKE_ZOOM_PICKER, convertToParameterArray());
             recordWebViewApiCall(ApiCall.INVOKE_ZOOM_PICKER);
             mAwContents.invokeZoomPicker();
         }
@@ -1473,6 +1630,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
         }
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICall.Framework.GET_HIT_TEST_RESULT")) {
+            recordWebViewApiCall(ApiCall.GET_HIT_TEST_RESULT, convertToParameterArray());
             recordWebViewApiCall(ApiCall.GET_HIT_TEST_RESULT);
             AwContents.HitTestData data = mAwContents.getLastHitTestResult();
             mHitTestResult.setType(data.hitTestResultType);
@@ -1494,6 +1652,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
         }
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICall.Framework.REQUEST_FOCUS_NODE_HREF")) {
+            recordWebViewApiCall(ApiCall.REQUEST_FOCUS_NODE_HREF, convertToParameterArray(hrefMsg));
             recordWebViewApiCall(ApiCall.REQUEST_FOCUS_NODE_HREF);
             mAwContents.requestFocusNodeHref(hrefMsg);
         }
@@ -1511,6 +1670,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
             return;
         }
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.REQUEST_IMAGE_REF")) {
+            recordWebViewApiCall(ApiCall.REQUEST_IMAGE_REF, convertToParameterArray(msg));
             recordWebViewApiCall(ApiCall.REQUEST_IMAGE_REF);
             mAwContents.requestImageRef(msg);
         }
@@ -1529,8 +1689,12 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
             return ret;
         }
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.GET_URL")) {
+            recordWebViewApiCall(ApiCall.GET_URL, convertToParameterArray());
             recordWebViewApiCall(ApiCall.GET_URL);
             GURL url = mAwContents.getUrl();
+            if (CommandLine.getInstance().hasSwitch(AwSwitches.WEBVIEW_FORCE_WEBSITE)) {
+                return WebViewChromium.getLastUrl(mWebView);
+            }
             return url == null ? null : url.getSpec();
         }
     }
@@ -1548,7 +1712,11 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
             return ret;
         }
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.GET_ORIGINAL_URL")) {
+            recordWebViewApiCall(ApiCall.GET_ORIGINAL_URL, convertToParameterArray());
             recordWebViewApiCall(ApiCall.GET_ORIGINAL_URL);
+            if (CommandLine.getInstance().hasSwitch(AwSwitches.WEBVIEW_FORCE_WEBSITE)) {
+                return WebViewChromium.getLastUrl(mWebView);
+            }
             return mAwContents.getOriginalUrl();
         }
     }
@@ -1566,6 +1734,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
             return ret;
         }
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.GET_TITLE")) {
+            recordWebViewApiCall(ApiCall.GET_TITLE, convertToParameterArray());
             recordWebViewApiCall(ApiCall.GET_TITLE);
             return mAwContents.getTitle();
         }
@@ -1584,6 +1753,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
             return ret;
         }
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.GET_FAVICON")) {
+            recordWebViewApiCall(ApiCall.GET_FAVICON, convertToParameterArray());
             recordWebViewApiCall(ApiCall.GET_FAVICON);
             return mAwContents.getFavicon();
         }
@@ -1598,6 +1768,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
     @Override
     public int getProgress() {
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.GET_PROGRESS")) {
+            recordWebViewApiCall(ApiCall.GET_PROGRESS, convertToParameterArray());
             recordWebViewApiCall(ApiCall.GET_PROGRESS);
             if (mAwContents == null) return 100;
             // No checkThread() because the value is cached java side (workaround for b/10533304).
@@ -1608,6 +1779,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
     @Override
     public int getContentHeight() {
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.GET_CONTENT_HEIGHT")) {
+            recordWebViewApiCall(ApiCall.GET_CONTENT_HEIGHT, convertToParameterArray());
             recordWebViewApiCall(ApiCall.GET_CONTENT_HEIGHT);
             if (mAwContents == null) return 0;
             // No checkThread() as it is mostly thread safe (workaround for b/10594869).
@@ -1618,6 +1790,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
     @Override
     public int getContentWidth() {
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.GET_CONTENT_WIDTH")) {
+            recordWebViewApiCall(ApiCall.GET_CONTENT_WIDTH, convertToParameterArray());
             recordWebViewApiCall(ApiCall.GET_CONTENT_WIDTH);
             if (mAwContents == null) return 0;
             // No checkThread() as it is mostly thread safe (workaround for b/10594869).
@@ -1637,6 +1810,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
             return;
         }
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.PAUSE_TIMERS")) {
+            recordWebViewApiCall(ApiCall.PAUSE_TIMERS, convertToParameterArray());
             recordWebViewApiCall(ApiCall.PAUSE_TIMERS);
             mAwContents.pauseTimers();
         }
@@ -1654,6 +1828,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
             return;
         }
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.RESUME_TIMERS")) {
+            recordWebViewApiCall(ApiCall.RESUME_TIMERS, convertToParameterArray());
             recordWebViewApiCall(ApiCall.RESUME_TIMERS);
             mAwContents.resumeTimers();
         }
@@ -1671,6 +1846,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
             return;
         }
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.ON_PAUSE")) {
+            recordWebViewApiCall(ApiCall.ON_PAUSE, convertToParameterArray());
             recordWebViewApiCall(ApiCall.ON_PAUSE);
             mAwContents.onPause();
         }
@@ -1688,6 +1864,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
             return;
         }
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.ON_RESUME")) {
+            recordWebViewApiCall(ApiCall.ON_RESUME, convertToParameterArray());
             recordWebViewApiCall(ApiCall.ON_RESUME);
             mAwContents.onResume();
         }
@@ -1706,6 +1883,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
             return ret;
         }
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.IS_PAUSED")) {
+            recordWebViewApiCall(ApiCall.IS_PAUSED, convertToParameterArray());
             recordWebViewApiCall(ApiCall.IS_PAUSED);
             return mAwContents.isPaused();
         }
@@ -1728,6 +1906,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
             return;
         }
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.CLEAR_CACHE")) {
+            recordWebViewApiCall(ApiCall.CLEAR_CACHE, convertToParameterArray(includeDiskFiles));
             recordWebViewApiCall(ApiCall.CLEAR_CACHE);
             mAwContents.clearCache(includeDiskFiles);
         }
@@ -1748,6 +1927,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
             return;
         }
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.CLEAR_FORM_DATA")) {
+            recordWebViewApiCall(ApiCall.CLEAR_FORM_DATA, convertToParameterArray());
             recordWebViewApiCall(ApiCall.CLEAR_FORM_DATA);
             mAwContents.hideAutofillPopup();
         }
@@ -1765,6 +1945,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
             return;
         }
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.CLEAR_HISTORY")) {
+            recordWebViewApiCall(ApiCall.CLEAR_HISTORY, convertToParameterArray());
             recordWebViewApiCall(ApiCall.CLEAR_HISTORY);
             mAwContents.clearHistory();
         }
@@ -1783,6 +1964,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
         }
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICall.Framework.CLEAR_SSL_PREFERENCES")) {
+            recordWebViewApiCall(ApiCall.CLEAR_SSL_PREFERENCES, convertToParameterArray());
             recordWebViewApiCall(ApiCall.CLEAR_SSL_PREFERENCES);
             mAwContents.clearSslPreferences();
         }
@@ -1803,6 +1985,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
         }
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICall.Framework.COPY_BACK_FORWARD_LIST")) {
+            recordWebViewApiCall(ApiCall.COPY_BACK_FORWARD_LIST, convertToParameterArray());
             recordWebViewApiCall(ApiCall.COPY_BACK_FORWARD_LIST);
             // mAwContents.getNavigationHistory() can be null here if mAwContents has been
             // destroyed, and we do not handle passing null to the WebBackForwardListChromium
@@ -1816,6 +1999,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
     @Override
     public void setFindListener(WebView.FindListener listener) {
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.SET_FIND_LISTENER")) {
+            recordWebViewApiCall(ApiCall.SET_FIND_LISTENER, convertToParameterArray(listener));
             recordWebViewApiCall(ApiCall.SET_FIND_LISTENER);
             mContentsClientAdapter.setFindListener(listener);
         }
@@ -1833,6 +2017,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
             return;
         }
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.FIND_NEXT")) {
+            recordWebViewApiCall(ApiCall.FIND_NEXT, convertToParameterArray(forwards));
             recordWebViewApiCall(ApiCall.FIND_NEXT);
             mAwContents.findNext(forwards);
         }
@@ -1856,6 +2041,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
             return;
         }
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.FIND_ALL_ASYNC")) {
+            recordWebViewApiCall(ApiCall.FIND_ALL_ASYNC, convertToParameterArray(searchString));
             recordWebViewApiCall(ApiCall.FIND_ALL_ASYNC);
             mAwContents.findAllAsync(searchString);
         }
@@ -1864,6 +2050,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
     @Override
     public boolean showFindDialog(final String text, final boolean showIme) {
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.SHOW_FIND_DIALOG")) {
+            recordWebViewApiCall(ApiCall.SHOW_FIND_DIALOG, convertToParameterArray(text, showIme));
             recordWebViewApiCall(ApiCall.SHOW_FIND_DIALOG);
             mFactory.startYourEngines(false);
             if (checkNeedsPost()) {
@@ -1906,6 +2093,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
         }
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.NOTIFY_FIND_DIALOG_DISMISSED")) {
+            recordWebViewApiCall(ApiCall.NOTIFY_FIND_DIALOG_DISMISSED, convertToParameterArray());
             recordWebViewApiCall(ApiCall.NOTIFY_FIND_DIALOG_DISMISSED);
             clearMatches();
         }
@@ -1923,6 +2111,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
             return;
         }
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.CLEAR_MATCHES")) {
+            recordWebViewApiCall(ApiCall.CLEAR_MATCHES, convertToParameterArray());
             recordWebViewApiCall(ApiCall.CLEAR_MATCHES);
             mAwContents.clearMatches();
         }
@@ -1941,6 +2130,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
         }
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICall.Framework.DOCUMENT_HAS_IMAGES")) {
+            recordWebViewApiCall(ApiCall.DOCUMENT_HAS_IMAGES, convertToParameterArray(response));
             recordWebViewApiCall(ApiCall.DOCUMENT_HAS_IMAGES);
             mAwContents.documentHasImages(response);
         }
@@ -1949,6 +2139,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
     @Override
     public void setWebViewClient(WebViewClient client) {
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.SET_WEBVIEW_CLIENT")) {
+            recordWebViewApiCall(ApiCall.SET_WEBVIEW_CLIENT, convertToParameterArray(client));
             recordWebViewApiCall(ApiCall.SET_WEBVIEW_CLIENT);
             mSharedWebViewChromium.setWebViewClient(client);
             mContentsClientAdapter.setWebViewClient(mSharedWebViewChromium.getWebViewClient());
@@ -1958,6 +2149,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
     @Override
     public WebViewClient getWebViewClient() {
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.GET_WEBVIEW_CLIENT")) {
+            recordWebViewApiCall(ApiCall.GET_WEBVIEW_CLIENT, convertToParameterArray());
             recordWebViewApiCall(ApiCall.GET_WEBVIEW_CLIENT);
             return mSharedWebViewChromium.getWebViewClient();
         }
@@ -1968,6 +2160,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
     public WebViewRenderProcess getWebViewRenderProcess() {
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICall.Framework.GET_WEBVIEW_RENDER_PROCESS")) {
+            recordWebViewApiCall(ApiCall.GET_WEBVIEW_RENDER_PROCESS, convertToParameterArray());
             recordWebViewApiCall(ApiCall.GET_WEBVIEW_RENDER_PROCESS);
             return GlueApiHelperForQ.getWebViewRenderProcess(
                     mSharedWebViewChromium.getRenderProcess());
@@ -1986,6 +2179,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
             }
             try (TraceEvent event = TraceEvent.scoped(
                          "WebView.APICall.Framework.SET_WEBVIEW_RENDER_PROCESS_CLIENT")) {
+                recordWebViewApiCall(ApiCall.SET_WEBVIEW_RENDER_PROCESS_CLIENT, convertToParameterArray(executor, webViewRenderProcessClient));
                 recordWebViewApiCall(ApiCall.SET_WEBVIEW_RENDER_PROCESS_CLIENT);
                 GlueApiHelperForQ.setWebViewRenderProcessClient(
                         mSharedWebViewChromium, executor, webViewRenderProcessClient);
@@ -2003,6 +2197,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
         }
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.GET_WEBVIEW_RENDER_PROCESS_CLIENT")) {
+            recordWebViewApiCall(ApiCall.GET_WEBVIEW_RENDER_PROCESS, convertToParameterArray());
             recordWebViewApiCall(ApiCall.GET_WEBVIEW_RENDER_PROCESS_CLIENT);
             return GlueApiHelperForQ.getWebViewRenderProcessClient(adapter);
         }
@@ -2012,6 +2207,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
     public void setDownloadListener(DownloadListener listener) {
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICall.Framework.SET_DOWNLOAD_LISTENER")) {
+            recordWebViewApiCall(ApiCall.SET_DOWNLOAD_LISTENER, convertToParameterArray(listener));
             recordWebViewApiCall(ApiCall.SET_DOWNLOAD_LISTENER);
             mContentsClientAdapter.setDownloadListener(listener);
         }
@@ -2021,6 +2217,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
     public void setWebChromeClient(WebChromeClient client) {
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICall.Framework.SET_WEBCHROME_CLIENT")) {
+            recordWebViewApiCall(ApiCall.SET_WEBCHROME_CLIENT, convertToParameterArray(client));
             recordWebViewApiCall(ApiCall.SET_WEBCHROME_CLIENT);
             mWebSettings.getAwSettings().setFullscreenSupported(doesSupportFullscreen(client));
             mSharedWebViewChromium.setWebChromeClient(client);
@@ -2032,6 +2229,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
     public WebChromeClient getWebChromeClient() {
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICall.Framework.GET_WEBCHROME_CLIENT")) {
+            recordWebViewApiCall(ApiCall.GET_WEBCHROME_CLIENT, convertToParameterArray());
             recordWebViewApiCall(ApiCall.GET_WEBCHROME_CLIENT);
             return mSharedWebViewChromium.getWebChromeClient();
         }
@@ -2046,6 +2244,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
     private boolean doesSupportFullscreen(WebChromeClient client) {
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICall.Framework.DOES_SUPPORT_FULLSCREEN")) {
+            recordWebViewApiCall(ApiCall.DOES_SUPPORT_FULLSCREEN, convertToParameterArray(client));
             recordWebViewApiCall(ApiCall.DOES_SUPPORT_FULLSCREEN);
             if (client == null) {
                 return false;
@@ -2092,6 +2291,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
         }
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICall.Framework.SET_PICTURE_LISTENER")) {
+            recordWebViewApiCall(ApiCall.SET_PICTURE_LISTENER, convertToParameterArray(listener));
             recordWebViewApiCall(ApiCall.SET_PICTURE_LISTENER);
             boolean invalidateOnly = mAppTargetSdkVersion >= Build.VERSION_CODES.JELLY_BEAN_MR2;
             mContentsClientAdapter.setPictureListener(listener, invalidateOnly);
@@ -2112,6 +2312,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
         }
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICall.Framework.ADD_JAVASCRIPT_INTERFACE")) {
+            recordWebViewApiCall(ApiCall.ADD_JAVASCRIPT_INTERFACE, convertToParameterArray(obj, interfaceName));
             recordWebViewApiCall(ApiCall.ADD_JAVASCRIPT_INTERFACE);
             mAwContents.addJavascriptInterface(obj, interfaceName);
         }
@@ -2130,6 +2331,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
         }
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.REMOVE_JAVASCRIPT_INTERFACE")) {
+            recordWebViewApiCall(ApiCall.REMOVE_JAVASCRIPT_INTERFACE, convertToParameterArray(interfaceName));
             recordWebViewApiCall(ApiCall.REMOVE_JAVASCRIPT_INTERFACE);
             mAwContents.removeJavascriptInterface(interfaceName);
         }
@@ -2139,6 +2341,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
     public WebMessagePort[] createWebMessageChannel() {
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICall.Framework.CREATE_WEBMESSAGE_CHANNEL")) {
+            recordWebViewApiCall(ApiCall.CREATE_WEBMESSAGE_CHANNEL, convertToParameterArray());
             recordWebViewApiCall(ApiCall.CREATE_WEBMESSAGE_CHANNEL);
             return WebMessagePortAdapter.fromMessagePorts(
                     mSharedWebViewChromium.createWebMessageChannel());
@@ -2147,8 +2350,10 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
 
     @Override
     public void postMessageToMainFrame(final WebMessage message, final Uri targetOrigin) {
+        // TODO: figure out if we need to change the targetOrigin
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICall.Framework.POST_MESSAGE_TO_MAIN_FRAME")) {
+            recordWebViewApiCall(ApiCall.POST_MESSAGE_TO_MAIN_FRAME, convertToParameterArray(message, targetOrigin));
             recordWebViewApiCall(ApiCall.POST_MESSAGE_TO_MAIN_FRAME);
             // Create MessagePayload from AOSP WebMessage, MessagePayload is not directly supported
             // by AOSP.
@@ -2161,6 +2366,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
     @Override
     public WebSettings getSettings() {
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.GET_SETTINGS")) {
+            recordWebViewApiCall(ApiCall.GET_SETTINGS, convertToParameterArray());
             recordWebViewApiCall(ApiCall.GET_SETTINGS);
             return mWebSettings;
         }
@@ -2183,6 +2389,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
             return;
         }
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.FLING_SCROLL")) {
+            recordWebViewApiCall(ApiCall.FLING_SCROLL, convertToParameterArray(vx, vy));
             recordWebViewApiCall(ApiCall.FLING_SCROLL);
             mAwContents.flingScroll(vx, vy);
         }
@@ -2204,6 +2411,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
     @Override
     public boolean canZoomIn() {
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.CAN_ZOOM_IN")) {
+            recordWebViewApiCall(ApiCall.CAN_ZOOM_IN, convertToParameterArray());
             recordWebViewApiCall(ApiCall.CAN_ZOOM_IN);
             if (checkNeedsPost()) {
                 return false;
@@ -2215,6 +2423,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
     @Override
     public boolean canZoomOut() {
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.CAN_ZOOM_OUT")) {
+            recordWebViewApiCall(ApiCall.CAN_ZOOM_OUT, convertToParameterArray());
             recordWebViewApiCall(ApiCall.CAN_ZOOM_OUT);
             if (checkNeedsPost()) {
                 return false;
@@ -2236,6 +2445,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
             return ret;
         }
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.ZOOM_IN")) {
+            recordWebViewApiCall(ApiCall.ZOOM_IN, convertToParameterArray());
             recordWebViewApiCall(ApiCall.ZOOM_IN);
             return mAwContents.zoomIn();
         }
@@ -2254,6 +2464,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
             return ret;
         }
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.ZOOM_OUT")) {
+            recordWebViewApiCall(ApiCall.ZOOM_OUT, convertToParameterArray());
             recordWebViewApiCall(ApiCall.ZOOM_OUT);
             return mAwContents.zoomOut();
         }
@@ -2264,6 +2475,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
     @Override
     public boolean zoomBy(float factor) {
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.ZOOM_BY")) {
+            recordWebViewApiCall(ApiCall.ZOOM_BY, convertToParameterArray(factor));
             recordWebViewApiCall(ApiCall.ZOOM_BY);
             mFactory.startYourEngines(true);
             // This is an L API and therefore we can enforce stricter threading constraints.
@@ -2290,6 +2502,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICall.Framework.SET_RENDERER_PRIORITY_POLICY",
                                 rendererRequestedPriority)) {
+            recordWebViewApiCall(ApiCall.SET_RENDERER_PRIORITY_POLICY, convertToParameterArray(rendererRequestedPriority, waivedWhenNotVisible));
             recordWebViewApiCall(ApiCall.SET_RENDERER_PRIORITY_POLICY);
             @RendererPriority
             int awRendererRequestedPriority;
@@ -2314,6 +2527,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
     public int getRendererRequestedPriority() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.GET_RENDERER_REQUESTED_PRIORITY")) {
+            recordWebViewApiCall(ApiCall.GET_RENDERER_REQUESTED_PRIORITY, convertToParameterArray());
             recordWebViewApiCall(ApiCall.GET_RENDERER_REQUESTED_PRIORITY);
             @RendererPriority
             final int awRendererRequestedPriority = mAwContents.getRendererRequestedPriority();
@@ -2333,6 +2547,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
     public boolean getRendererPriorityWaivedWhenNotVisible() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.GET_RENDERER_PRIORITY_WAIVED_WHEN_NOT_VISIBLE")) {
+            recordWebViewApiCall(ApiCall.GET_RENDERER_PRIORITY_WAIVED_WHEN_NOT_VISIBLE, convertToParameterArray());
             recordWebViewApiCall(ApiCall.GET_RENDERER_PRIORITY_WAIVED_WHEN_NOT_VISIBLE);
             return mAwContents.getRendererPriorityWaivedWhenNotVisible();
         }
@@ -2342,6 +2557,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
     public void setTextClassifier(TextClassifier textClassifier) {
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICall.Framework.SET_TEXT_CLASSIFIER")) {
+            recordWebViewApiCall(ApiCall.SET_TEXT_CLASSIFIER, convertToParameterArray(textClassifier));
             recordWebViewApiCall(ApiCall.SET_TEXT_CLASSIFIER);
             mAwContents.setTextClassifier(textClassifier);
         }
@@ -2351,6 +2567,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
     public TextClassifier getTextClassifier() {
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICall.Framework.GET_TEXT_CLASSIFIER")) {
+            recordWebViewApiCall(ApiCall.GET_TEXT_CLASSIFIER, convertToParameterArray());
             recordWebViewApiCall(ApiCall.GET_TEXT_CLASSIFIER);
             return mAwContents.getTextClassifier();
         }
@@ -2368,6 +2585,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
             });
         }
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.AUTOFILL")) {
+            recordWebViewApiCall(ApiCall.AUTOFILL, convertToParameterArray(values));
             recordWebViewApiCall(ApiCall.AUTOFILL);
             mAwContents.autofill(values);
         }
@@ -2387,6 +2605,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
         }
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.ON_PROVIDE_AUTOFILL_VIRTUAL_STRUCTURE")) {
+            recordWebViewApiCall(ApiCall.ON_PROVIDE_AUTOFILL_VIRTUAL_STRUCTURE, convertToParameterArray(structure, flags));
             recordWebViewApiCall(ApiCall.ON_PROVIDE_AUTOFILL_VIRTUAL_STRUCTURE);
             mAwContents.onProvideAutoFillVirtualStructure(structure, flags);
         }
@@ -2399,6 +2618,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
         }
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.ON_PROVIDE_CONTENT_CAPTURE_STRUCTURE")) {
+            recordWebViewApiCall(ApiCall.ON_PROVIDE_CONTENT_CAPTURE_STRUCTURE, convertToParameterArray(structure, flags));
             recordWebViewApiCall(ApiCall.ON_PROVIDE_CONTENT_CAPTURE_STRUCTURE);
             mAwContents.setOnscreenContentProvider(new OnscreenContentProvider(
                     ClassLoaderContextWrapperFactory.get(mWebView.getContext()), mWebView,
@@ -2436,6 +2656,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
             });
             return ret;
         }
+        recordWebViewApiCall(ApiCall.SHOULD_DELAY_CHILD_PRESSED_STATE, convertToParameterArray());
         return true;
     }
 
@@ -2454,6 +2675,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
         }
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.GET_ACCESSIBILITY_NODE_PROVIDER")) {
+            recordWebViewApiCall(ApiCall.GET_ACCESSIBILITY_NODE_PROVIDER, convertToParameterArray());
             recordWebViewApiCall(ApiCall.GET_ACCESSIBILITY_NODE_PROVIDER);
             return mAwContents.getAccessibilityNodeProvider();
         }
@@ -2474,6 +2696,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
 
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.ON_PROVIDE_VIRTUAL_STRUCTURE")) {
+            recordWebViewApiCall(ApiCall.ON_PROVIDE_VIRTUAL_STRUCTURE, convertToParameterArray(structure));
             recordWebViewApiCall(ApiCall.ON_PROVIDE_VIRTUAL_STRUCTURE);
             mAwContents.onProvideVirtualStructure(structure);
         }
@@ -2525,6 +2748,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
         }
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICall.Framework.SET_OVERSCROLL_MODE")) {
+            recordWebViewApiCall(ApiCall.SET_OVERSCROLL_MODE, convertToParameterArray(mode));
             recordWebViewApiCall(ApiCall.SET_OVERSCROLL_MODE);
             mAwContents.setOverScrollMode(mode);
         }
@@ -2543,6 +2767,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
         }
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICall.Framework.SET_SCROLL_BAR_STYLE")) {
+            recordWebViewApiCall(ApiCall.SET_SCROLL_BAR_STYLE, convertToParameterArray(style));
             recordWebViewApiCall(ApiCall.SET_SCROLL_BAR_STYLE);
             mAwContents.setScrollBarStyle(style);
         }
@@ -2620,6 +2845,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
             return;
         }
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.SET_LAYOUT_PARAMS")) {
+            recordWebViewApiCall(ApiCall.SET_LAYOUT_PARAMS, convertToParameterArray(layoutParams));
             recordWebViewApiCall(ApiCall.SET_LAYOUT_PARAMS);
             mAwContents.setLayoutParams(layoutParams);
         }
@@ -2642,6 +2868,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
     @Override
     public boolean performLongClick() {
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.PERFORM_LONG_CLICK")) {
+            recordWebViewApiCall(ApiCall.PERFORM_LONG_CLICK, convertToParameterArray());
             recordWebViewApiCall(ApiCall.PERFORM_LONG_CLICK);
             // Return false unless the WebView is attached to a View with a parent
             return mWebView.getParent() != null ? mWebViewPrivate.super_performLongClick() : false;
@@ -2958,6 +3185,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
             return ret;
         }
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.REQUEST_FOCUS")) {
+            recordWebViewApiCall(ApiCall.REQUEST_FOCUS, convertToParameterArray(direction, previouslyFocusedRect));
             recordWebViewApiCall(ApiCall.REQUEST_FOCUS);
             mAwContents.requestFocus();
             return mWebViewPrivate.super_requestFocus(direction, previouslyFocusedRect);
@@ -2995,6 +3223,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
         }
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.REQUEST_CHILD_RECTANGLE_ON_SCREEN")) {
+            recordWebViewApiCall(ApiCall.REQUEST_CHILD_RECTANGLE_ON_SCREEN, convertToParameterArray(child, rect, immediate));
             recordWebViewApiCall(ApiCall.REQUEST_CHILD_RECTANGLE_ON_SCREEN);
             return mAwContents.requestChildRectangleOnScreen(child, rect, immediate);
         }
@@ -3014,6 +3243,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
         }
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICall.Framework.SET_BACKGROUND_COLOR")) {
+            recordWebViewApiCall(ApiCall.SET_BACKGROUND_COLOR, convertToParameterArray(color));
             recordWebViewApiCall(ApiCall.SET_BACKGROUND_COLOR);
             mAwContents.setBackgroundColor(color);
         }
@@ -3034,6 +3264,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
             return;
         }
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.SET_LAYER_TYPE")) {
+            recordWebViewApiCall(ApiCall.SET_LAYER_TYPE, convertToParameterArray(layerType, paint));
             recordWebViewApiCall(ApiCall.SET_LAYER_TYPE);
             mAwContents.setLayerType(layerType, paint);
         }
@@ -3044,6 +3275,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
     @Override
     public Handler getHandler(Handler originalHandler) {
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.GET_HANDLER")) {
+            recordWebViewApiCall(ApiCall.GET_HANDLER, convertToParameterArray(originalHandler));
             recordWebViewApiCall(ApiCall.GET_HANDLER);
             return originalHandler;
         }
@@ -3054,6 +3286,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
     @Override
     public View findFocus(View originalFocusedView) {
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.Framework.FIND_FOCUS")) {
+            recordWebViewApiCall(ApiCall.FIND_FOCUS, convertToParameterArray(originalFocusedView));
             recordWebViewApiCall(ApiCall.FIND_FOCUS);
             return originalFocusedView;
         }
@@ -3203,6 +3436,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
     public PrintDocumentAdapter createPrintDocumentAdapter(String documentName) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.CREATE_PRINT_DOCUMENT_ADAPTER")) {
+            recordWebViewApiCall(ApiCall.CREATE_PRINT_DOCUMENT_ADAPTER, convertToParameterArray(documentName));
             recordWebViewApiCall(ApiCall.CREATE_PRINT_DOCUMENT_ADAPTER);
             checkThread();
             return new AwPrintDocumentAdapter(mAwContents.getPdfExporter(), documentName);
@@ -3292,6 +3526,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
     public void extractSmartClipData(int x, int y, int width, int height) {
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICall.Framework.EXTRACT_SMART_CLIP_DATA")) {
+            recordWebViewApiCall(ApiCall.EXTRACT_SMART_CLIP_DATA, convertToParameterArray(x, y, width, height));
             recordWebViewApiCall(ApiCall.EXTRACT_SMART_CLIP_DATA);
             checkThread();
             mAwContents.extractSmartClipData(x, y, width, height);
@@ -3303,6 +3538,7 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
     public void setSmartClipResultHandler(final Handler resultHandler) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.SET_SMART_CLIP_RESULT_HANDLER")) {
+            recordWebViewApiCall(ApiCall.SET_SMART_CLIP_RESULT_HANDLER, convertToParameterArray(resultHandler));
             recordWebViewApiCall(ApiCall.SET_SMART_CLIP_RESULT_HANDLER);
             checkThread();
             mAwContents.setSmartClipResultHandler(resultHandler);
diff --git a/android_webview/glue/java/src/com/android/webview/chromium/WebViewContentsClientAdapter.java b/android_webview/glue/java/src/com/android/webview/chromium/WebViewContentsClientAdapter.java
index 0080b3b681..15a24010c5 100644
--- a/android_webview/glue/java/src/com/android/webview/chromium/WebViewContentsClientAdapter.java
+++ b/android_webview/glue/java/src/com/android/webview/chromium/WebViewContentsClientAdapter.java
@@ -56,6 +56,8 @@ import org.chromium.base.metrics.ScopedSysTraceEvent;
 import org.chromium.base.task.PostTask;
 import org.chromium.base.task.TaskTraits;
 import org.chromium.components.embedder_support.util.WebResourceResponseInfo;
+import org.chromium.base.CommandLine;
+import org.chromium.android_webview.common.AwSwitches;
 
 import java.lang.ref.WeakReference;
 import java.security.Principal;
@@ -222,6 +224,15 @@ class WebViewContentsClientAdapter extends SharedWebViewContentsClientAdapter {
     public WebResourceResponseInfo shouldInterceptRequest(AwWebResourceRequest request) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICallback.WebViewClient.shouldInterceptRequest")) {
+
+            if (CommandLine.getInstance().hasSwitch(AwSwitches.WEBVIEW_FORCE_WEBSITE)) {
+                AwWebResourceRequest newRequest = new AwWebResourceRequest(
+                        WebViewChromium.getLastUrl(mWebView), request.isOutermostMainFrame, request.hasUserGesture, request.method, request.requestHeaders
+                );
+                newRequest.isRedirect = request.isRedirect;
+                request = newRequest;
+            }
+
             AwHistogramRecorder.recordCallbackInvocation(
                     AwHistogramRecorder.WebViewCallbackType.SHOULD_INTERCEPT_REQUEST);
             if (TRACE) Log.i(TAG, "shouldInterceptRequest=" + request.url);
@@ -298,6 +309,9 @@ class WebViewContentsClientAdapter extends SharedWebViewContentsClientAdapter {
 
     @Override
     public void onLoadResource(String url) {
+        if (CommandLine.getInstance().hasSwitch(AwSwitches.WEBVIEW_FORCE_WEBSITE)) {
+            url = WebViewChromium.getLastUrl(mWebView);
+        }
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICallback.WebViewClient.onLoadResource")) {
             if (TRACE) Log.i(TAG, "onLoadResource=" + url);
@@ -397,6 +411,9 @@ class WebViewContentsClientAdapter extends SharedWebViewContentsClientAdapter {
      */
     @Override
     public void onPageStarted(String url) {
+        if (CommandLine.getInstance().hasSwitch(AwSwitches.WEBVIEW_FORCE_WEBSITE)) {
+            url = WebViewChromium.getLastUrl(mWebView);
+        }
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICallback.WebViewClient.onPageStarted")) {
             if (TRACE) Log.i(TAG, "onPageStarted=" + url);
@@ -413,6 +430,9 @@ class WebViewContentsClientAdapter extends SharedWebViewContentsClientAdapter {
      */
     @Override
     public void onPageFinished(String url) {
+        if (CommandLine.getInstance().hasSwitch(AwSwitches.WEBVIEW_FORCE_WEBSITE)) {
+            url = WebViewChromium.getLastUrl(mWebView);
+        }
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICallback.WebViewClient.onPageFinished")) {
             if (TRACE) Log.i(TAG, "onPageFinished=" + url);
diff --git a/android_webview/glue/java/src/com/android/webview/chromium/WebViewDatabaseAdapter.java b/android_webview/glue/java/src/com/android/webview/chromium/WebViewDatabaseAdapter.java
index 00b867b4c0..0d8b77a96e 100644
--- a/android_webview/glue/java/src/com/android/webview/chromium/WebViewDatabaseAdapter.java
+++ b/android_webview/glue/java/src/com/android/webview/chromium/WebViewDatabaseAdapter.java
@@ -37,6 +37,7 @@ final class WebViewDatabaseAdapter extends WebViewDatabase {
     public boolean hasUsernamePassword() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEBVIEW_DATABASE_HAS_USERNAME_PASSWORD")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEBVIEW_DATABASE_HAS_USERNAME_PASSWORD, WebViewChromium.convertToParameterArray());
             WebViewChromium.recordWebViewApiCall(ApiCall.WEBVIEW_DATABASE_HAS_USERNAME_PASSWORD);
             // This is a deprecated API: intentional no-op.
             return false;
@@ -47,6 +48,7 @@ final class WebViewDatabaseAdapter extends WebViewDatabase {
     public void clearUsernamePassword() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEBVIEW_DATABASE_CLEAR_USERNAME_PASSWORD")) {
+            WebViewChromium.recordWebViewApiCall(ApiCall.WEBVIEW_DATABASE_CLEAR_USERNAME_PASSWORD, WebViewChromium.convertToParameterArray());
             WebViewChromium.recordWebViewApiCall(ApiCall.WEBVIEW_DATABASE_CLEAR_USERNAME_PASSWORD);
             // This is a deprecated API: intentional no-op.}
         }
@@ -60,6 +62,8 @@ final class WebViewDatabaseAdapter extends WebViewDatabase {
                 public Boolean call() {
                     try (TraceEvent event = TraceEvent.scoped(
                                  "WebView.ApiCall.WEBVIEW_DATABASE_HAS_HTTP_AUTH_USERNAME_PASSWORD")) {
+                        WebViewChromium.recordWebViewApiCall(
+                                ApiCall.WEBVIEW_DATABASE_HAS_HTTP_AUTH_USERNAME_PASSWORD, WebViewChromium.convertToParameterArray());
                         WebViewChromium.recordWebViewApiCall(
                                 ApiCall.WEBVIEW_DATABASE_HAS_HTTP_AUTH_USERNAME_PASSWORD);
                         return mHttpAuthDatabase.hasHttpAuthUsernamePassword();
@@ -69,6 +73,8 @@ final class WebViewDatabaseAdapter extends WebViewDatabase {
         }
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.ApiCall.WEBVIEW_DATABASE_HAS_HTTP_AUTH_USERNAME_PASSWORD")) {
+            WebViewChromium.recordWebViewApiCall(
+                ApiCall.WEBVIEW_DATABASE_HAS_HTTP_AUTH_USERNAME_PASSWORD, WebViewChromium.convertToParameterArray());
             WebViewChromium.recordWebViewApiCall(
                     ApiCall.WEBVIEW_DATABASE_HAS_HTTP_AUTH_USERNAME_PASSWORD);
             return mHttpAuthDatabase.hasHttpAuthUsernamePassword();
@@ -83,6 +89,8 @@ final class WebViewDatabaseAdapter extends WebViewDatabase {
                 public void run() {
                     try (TraceEvent event = TraceEvent.scoped(
                                  "WebView.ApiCall.WEBVIEW_DATABASE_CLEAR_HTTP_AUTH_USERNAME_PASSWORD")) {
+                        WebViewChromium.recordWebViewApiCall(
+                                ApiCall.WEBVIEW_DATABASE_CLEAR_HTTP_AUTH_USERNAME_PASSWORD, WebViewChromium.convertToParameterArray());
                         WebViewChromium.recordWebViewApiCall(
                                 ApiCall.WEBVIEW_DATABASE_CLEAR_HTTP_AUTH_USERNAME_PASSWORD);
                         mHttpAuthDatabase.clearHttpAuthUsernamePassword();
@@ -94,6 +102,8 @@ final class WebViewDatabaseAdapter extends WebViewDatabase {
         }
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.ApiCall.WEBVIEW_DATABASE_CLEAR_HTTP_AUTH_USERNAME_PASSWORD")) {
+            WebViewChromium.recordWebViewApiCall(
+                            ApiCall.WEBVIEW_DATABASE_CLEAR_HTTP_AUTH_USERNAME_PASSWORD, WebViewChromium.convertToParameterArray());
             WebViewChromium.recordWebViewApiCall(
                     ApiCall.WEBVIEW_DATABASE_CLEAR_HTTP_AUTH_USERNAME_PASSWORD);
             mHttpAuthDatabase.clearHttpAuthUsernamePassword();
@@ -109,6 +119,9 @@ final class WebViewDatabaseAdapter extends WebViewDatabase {
                 public void run() {
                     try (TraceEvent event = TraceEvent.scoped(
                                  "WebView.ApiCall.WEBVIEW_DATABASE_SET_HTTP_AUTH_USERNAME_PASSWORD")) {
+                        WebViewChromium.recordWebViewApiCall(
+                                ApiCall.WEBVIEW_DATABASE_SET_HTTP_AUTH_USERNAME_PASSWORD, 
+                                WebViewChromium.convertToParameterArray(host, realm, username, password));
                         WebViewChromium.recordWebViewApiCall(
                                 ApiCall.WEBVIEW_DATABASE_SET_HTTP_AUTH_USERNAME_PASSWORD);
                         mHttpAuthDatabase.setHttpAuthUsernamePassword(
@@ -121,6 +134,9 @@ final class WebViewDatabaseAdapter extends WebViewDatabase {
 
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.ApiCall.WEBVIEW_DATABASE_SET_HTTP_AUTH_USERNAME_PASSWORD")) {
+            WebViewChromium.recordWebViewApiCall(
+                                ApiCall.WEBVIEW_DATABASE_SET_HTTP_AUTH_USERNAME_PASSWORD, 
+                                WebViewChromium.convertToParameterArray(host, realm, username, password));
             WebViewChromium.recordWebViewApiCall(
                     ApiCall.WEBVIEW_DATABASE_SET_HTTP_AUTH_USERNAME_PASSWORD);
             mHttpAuthDatabase.setHttpAuthUsernamePassword(host, realm, username, password);
@@ -135,6 +151,9 @@ final class WebViewDatabaseAdapter extends WebViewDatabase {
                 public String[] call() {
                     try (TraceEvent event = TraceEvent.scoped(
                                  "WebView.ApiCall.WEBVIEW_DATABASE_GET_HTTP_AUTH_USERNAME_PASSWORD")) {
+                        WebViewChromium.recordWebViewApiCall(
+                                ApiCall.WEBVIEW_DATABASE_GET_HTTP_AUTH_USERNAME_PASSWORD, 
+                                WebViewChromium.convertToParameterArray(host, realm));
                         WebViewChromium.recordWebViewApiCall(
                                 ApiCall.WEBVIEW_DATABASE_GET_HTTP_AUTH_USERNAME_PASSWORD);
                         return mHttpAuthDatabase.getHttpAuthUsernamePassword(host, realm);
@@ -144,6 +163,9 @@ final class WebViewDatabaseAdapter extends WebViewDatabase {
         }
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.ApiCall.WEBVIEW_DATABASE_GET_HTTP_AUTH_USERNAME_PASSWORD")) {
+             WebViewChromium.recordWebViewApiCall(
+                                ApiCall.WEBVIEW_DATABASE_GET_HTTP_AUTH_USERNAME_PASSWORD, 
+                                WebViewChromium.convertToParameterArray(host, realm));
             WebViewChromium.recordWebViewApiCall(
                     ApiCall.WEBVIEW_DATABASE_GET_HTTP_AUTH_USERNAME_PASSWORD);
             return mHttpAuthDatabase.getHttpAuthUsernamePassword(host, realm);
@@ -160,6 +182,9 @@ final class WebViewDatabaseAdapter extends WebViewDatabase {
                 public Boolean call() {
                     try (TraceEvent event = TraceEvent.scoped(
                                  "WebView.APICall.Framework.WEBVIEW_DATABASE_HAS_FORM_DATA")) {
+                        WebViewChromium.recordWebViewApiCall(
+                                ApiCall.WEBVIEW_DATABASE_HAS_FORM_DATA, 
+                                WebViewChromium.convertToParameterArray());
                         WebViewChromium.recordWebViewApiCall(
                                 ApiCall.WEBVIEW_DATABASE_HAS_FORM_DATA);
                         return mBrowserContext.hasFormData();
@@ -171,6 +196,9 @@ final class WebViewDatabaseAdapter extends WebViewDatabase {
 
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEBVIEW_DATABASE_HAS_FORM_DATA")) {
+            WebViewChromium.recordWebViewApiCall(
+                                ApiCall.WEBVIEW_DATABASE_HAS_FORM_DATA, 
+                                WebViewChromium.convertToParameterArray());
             WebViewChromium.recordWebViewApiCall(ApiCall.WEBVIEW_DATABASE_HAS_FORM_DATA);
             return mBrowserContext.hasFormData();
         }
@@ -186,6 +214,9 @@ final class WebViewDatabaseAdapter extends WebViewDatabase {
                 public void run() {
                     try (TraceEvent event = TraceEvent.scoped(
                                  "WebView.APICall.Framework.WEBVIEW_DATABASE_CLEAR_FORM_DATA")) {
+                        WebViewChromium.recordWebViewApiCall(
+                                ApiCall.WEBVIEW_DATABASE_CLEAR_FORM_DATA, 
+                                WebViewChromium.convertToParameterArray());
                         WebViewChromium.recordWebViewApiCall(
                                 ApiCall.WEBVIEW_DATABASE_CLEAR_FORM_DATA);
                         mBrowserContext.clearFormData();
@@ -198,6 +229,9 @@ final class WebViewDatabaseAdapter extends WebViewDatabase {
 
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.Framework.WEBVIEW_DATABASE_CLEAR_FORM_DATA")) {
+            WebViewChromium.recordWebViewApiCall(
+                                ApiCall.WEBVIEW_DATABASE_CLEAR_FORM_DATA, 
+                                WebViewChromium.convertToParameterArray());
             WebViewChromium.recordWebViewApiCall(ApiCall.WEBVIEW_DATABASE_CLEAR_FORM_DATA);
             mBrowserContext.clearFormData();
         }
diff --git a/android_webview/java/src/org/chromium/android_webview/common/ProductionSupportedFlagList.java b/android_webview/java/src/org/chromium/android_webview/common/ProductionSupportedFlagList.java
index e08a822704..2445d1cef8 100644
--- a/android_webview/java/src/org/chromium/android_webview/common/ProductionSupportedFlagList.java
+++ b/android_webview/java/src/org/chromium/android_webview/common/ProductionSupportedFlagList.java
@@ -579,6 +579,8 @@ public final class ProductionSupportedFlagList {
                     GwpAsanFeatures.GWP_ASAN_PARTITION_ALLOC, "GWP-ASan for PartitionAlloc."),
             Flag.baseFeature(CcFeatures.USE_MAP_RECT_FOR_PIXEL_MOVEMENT,
                     "Enables the usage of MapRect for computing filter pixel movement."),
+            Flag.commandLine(AwSwitches.WEBVIEW_FORCE_WEBSITE,
+                    "Force to load a specific website when launchUrl is called."),
             // Add new commandline switches and features above. The final entry should have a
             // trailing comma for cleaner diffs.
     };
diff --git a/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibJsReplyProxyAdapter.java b/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibJsReplyProxyAdapter.java
index 9322ef4821..39aca0fa21 100644
--- a/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibJsReplyProxyAdapter.java
+++ b/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibJsReplyProxyAdapter.java
@@ -5,6 +5,8 @@
 package org.chromium.support_lib_glue;
 
 import static org.chromium.support_lib_glue.SupportLibWebViewChromiumFactory.recordApiCall;
+import static org.chromium.support_lib_glue.SupportLibWebViewChromiumFactory.recordWebViewApiCall;
+import static org.chromium.support_lib_glue.SupportLibWebViewChromiumFactory.convertToParameterArray;
 
 import org.chromium.android_webview.AwSupportLibIsomorphic;
 import org.chromium.android_webview.JsReplyProxy;
@@ -30,6 +32,7 @@ class SupportLibJsReplyProxyAdapter
     public void postMessage(String message) {
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICall.AndroidX.JS_REPLY_POST_MESSAGE")) {
+            recordWebViewApiCall(ApiCall.JS_REPLY_POST_MESSAGE, convertToParameterArray(message));
             recordApiCall(ApiCall.JS_REPLY_POST_MESSAGE);
             mReplyProxy.postMessage(new MessagePayload(message));
         }
@@ -39,6 +42,7 @@ class SupportLibJsReplyProxyAdapter
     public void postMessageWithPayload(/* MessagePayload */ InvocationHandler payload) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.AndroidX.JS_REPLY_POST_MESSAGE_WITH_PAYLOAD")) {
+            recordWebViewApiCall(ApiCall.JS_REPLY_POST_MESSAGE_WITH_PAYLOAD, convertToParameterArray(payload));
             recordApiCall(ApiCall.JS_REPLY_POST_MESSAGE_WITH_PAYLOAD);
             mReplyProxy.postMessage(SupportLibWebMessagePayloadAdapter.toMessagePayload(payload));
         }
diff --git a/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibProxyControllerAdapter.java b/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibProxyControllerAdapter.java
index d6cb6e0d5d..4063af3191 100644
--- a/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibProxyControllerAdapter.java
+++ b/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibProxyControllerAdapter.java
@@ -5,6 +5,8 @@
 package org.chromium.support_lib_glue;
 
 import static org.chromium.support_lib_glue.SupportLibWebViewChromiumFactory.recordApiCall;
+import static org.chromium.support_lib_glue.SupportLibWebViewChromiumFactory.recordWebViewApiCall;
+import static org.chromium.support_lib_glue.SupportLibWebViewChromiumFactory.convertToParameterArray;
 
 import org.chromium.android_webview.AwProxyController;
 import org.chromium.android_webview.WebViewChromiumRunQueue;
@@ -40,6 +42,8 @@ public class SupportLibProxyControllerAdapter implements ProxyControllerBoundary
             Executor executor, boolean reverseBypass) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.AndroidX.SET_PROXY_OVERRIDE_OR_REVERSE_BYPASS")) {
+            recordWebViewApiCall(reverseBypass ? ApiCall.SET_PROXY_OVERRIDE
+                                        : ApiCall.SET_PROXY_OVERRIDE_REVERSE_BYPASS, convertToParameterArray(proxyRules, bypassRules, listener, executor, reverseBypass));
             recordApiCall(reverseBypass ? ApiCall.SET_PROXY_OVERRIDE
                                         : ApiCall.SET_PROXY_OVERRIDE_REVERSE_BYPASS);
             if (checkNeedsPost()) {
@@ -64,6 +68,7 @@ public class SupportLibProxyControllerAdapter implements ProxyControllerBoundary
     public void clearProxyOverride(Runnable listener, Executor executor) {
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICall.AndroidX.CLEAR_PROXY_OVERRIDE")) {
+            recordWebViewApiCall(ApiCall.CLEAR_PROXY_OVERRIDE, convertToParameterArray(listener, executor));
             recordApiCall(ApiCall.CLEAR_PROXY_OVERRIDE);
             if (checkNeedsPost()) {
                 RuntimeException exception = mRunQueue.runOnUiThreadBlocking(() -> {
diff --git a/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibScriptHandlerAdapter.java b/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibScriptHandlerAdapter.java
index 9a7f6ab65f..2863137b23 100644
--- a/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibScriptHandlerAdapter.java
+++ b/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibScriptHandlerAdapter.java
@@ -5,6 +5,8 @@
 package org.chromium.support_lib_glue;
 
 import static org.chromium.support_lib_glue.SupportLibWebViewChromiumFactory.recordApiCall;
+import static org.chromium.support_lib_glue.SupportLibWebViewChromiumFactory.recordWebViewApiCall;
+import static org.chromium.support_lib_glue.SupportLibWebViewChromiumFactory.convertToParameterArray;
 
 import org.chromium.android_webview.ScriptHandler;
 import org.chromium.base.TraceEvent;
@@ -25,6 +27,7 @@ class SupportLibScriptHandlerAdapter implements ScriptHandlerBoundaryInterface {
     public void remove() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.AndroidX.REMOVE_DOCUMENT_START_SCRIPT")) {
+            recordWebViewApiCall(ApiCall.REMOVE_DOCUMENT_START_SCRIPT, convertToParameterArray());
             recordApiCall(ApiCall.REMOVE_DOCUMENT_START_SCRIPT);
             mScriptHandler.remove();
         }
diff --git a/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibServiceWorkerClientAdapter.java b/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibServiceWorkerClientAdapter.java
index 665d968132..ed3c4087d6 100644
--- a/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibServiceWorkerClientAdapter.java
+++ b/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibServiceWorkerClientAdapter.java
@@ -5,6 +5,8 @@
 package org.chromium.support_lib_glue;
 
 import static org.chromium.support_lib_glue.SupportLibWebViewChromiumFactory.recordApiCall;
+import static org.chromium.support_lib_glue.SupportLibWebViewChromiumFactory.recordWebViewApiCall;
+import static org.chromium.support_lib_glue.SupportLibWebViewChromiumFactory.convertToParameterArray;
 
 import android.webkit.WebResourceResponse;
 
@@ -33,6 +35,7 @@ class SupportLibServiceWorkerClientAdapter extends AwServiceWorkerClient {
     public WebResourceResponseInfo shouldInterceptRequest(AwWebResourceRequest request) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.AndroidX.SERVICE_WORKER_CLIENT_SHOULD_INTERCEPT_REQUEST")) {
+            recordWebViewApiCall(ApiCall.SERVICE_WORKER_CLIENT_SHOULD_INTERCEPT_REQUEST, convertToParameterArray(request));
             recordApiCall(ApiCall.SERVICE_WORKER_CLIENT_SHOULD_INTERCEPT_REQUEST);
             if (!BoundaryInterfaceReflectionUtil.containsFeature(mImpl.getSupportedFeatures(),
                         Features.SERVICE_WORKER_SHOULD_INTERCEPT_REQUEST)) {
diff --git a/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibServiceWorkerControllerAdapter.java b/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibServiceWorkerControllerAdapter.java
index 12043a5028..9341c328d3 100644
--- a/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibServiceWorkerControllerAdapter.java
+++ b/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibServiceWorkerControllerAdapter.java
@@ -5,6 +5,8 @@
 package org.chromium.support_lib_glue;
 
 import static org.chromium.support_lib_glue.SupportLibWebViewChromiumFactory.recordApiCall;
+import static org.chromium.support_lib_glue.SupportLibWebViewChromiumFactory.recordWebViewApiCall;
+import static org.chromium.support_lib_glue.SupportLibWebViewChromiumFactory.convertToParameterArray;
 
 import org.chromium.android_webview.AwServiceWorkerController;
 import org.chromium.base.TraceEvent;
@@ -29,6 +31,7 @@ class SupportLibServiceWorkerControllerAdapter implements ServiceWorkerControlle
     public InvocationHandler getServiceWorkerWebSettings() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.AndroidX.GET_SERVICE_WORKER_WEB_SETTINGS")) {
+            recordWebViewApiCall(ApiCall.GET_SERVICE_WORKER_WEB_SETTINGS, convertToParameterArray());
             recordApiCall(ApiCall.GET_SERVICE_WORKER_WEB_SETTINGS);
             return BoundaryInterfaceReflectionUtil.createInvocationHandlerFor(
                     new SupportLibServiceWorkerSettingsAdapter(
@@ -40,6 +43,7 @@ class SupportLibServiceWorkerControllerAdapter implements ServiceWorkerControlle
     public void setServiceWorkerClient(InvocationHandler client) {
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICall.AndroidX.SET_SERVICE_WORKER_CLIENT")) {
+            recordWebViewApiCall(ApiCall.SET_SERVICE_WORKER_CLIENT, convertToParameterArray(client));
             recordApiCall(ApiCall.SET_SERVICE_WORKER_CLIENT);
             mAwServiceWorkerController.setServiceWorkerClient(client == null
                             ? null
diff --git a/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibServiceWorkerSettingsAdapter.java b/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibServiceWorkerSettingsAdapter.java
index d6999d22f3..e0173284ad 100644
--- a/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibServiceWorkerSettingsAdapter.java
+++ b/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibServiceWorkerSettingsAdapter.java
@@ -5,6 +5,8 @@
 package org.chromium.support_lib_glue;
 
 import static org.chromium.support_lib_glue.SupportLibWebViewChromiumFactory.recordApiCall;
+import static org.chromium.support_lib_glue.SupportLibWebViewChromiumFactory.recordWebViewApiCall;
+import static org.chromium.support_lib_glue.SupportLibWebViewChromiumFactory.convertToParameterArray;
 
 import org.chromium.android_webview.AwServiceWorkerSettings;
 import org.chromium.base.TraceEvent;
@@ -31,6 +33,7 @@ class SupportLibServiceWorkerSettingsAdapter implements ServiceWorkerWebSettings
     public void setCacheMode(int mode) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.AndroidX.SERVICE_WORKER_SETTINGS_SET_CACHE_MODE")) {
+            recordWebViewApiCall(ApiCall.SERVICE_WORKER_SETTINGS_SET_CACHE_MODE, convertToParameterArray(mode));
             recordApiCall(ApiCall.SERVICE_WORKER_SETTINGS_SET_CACHE_MODE);
             mAwServiceWorkerSettings.setCacheMode(mode);
         }
@@ -40,6 +43,7 @@ class SupportLibServiceWorkerSettingsAdapter implements ServiceWorkerWebSettings
     public int getCacheMode() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.AndroidX.SERVICE_WORKER_SETTINGS_GET_CACHE_MODE")) {
+            recordWebViewApiCall(ApiCall.SERVICE_WORKER_SETTINGS_GET_CACHE_MODE, convertToParameterArray());
             recordApiCall(ApiCall.SERVICE_WORKER_SETTINGS_GET_CACHE_MODE);
             return mAwServiceWorkerSettings.getCacheMode();
         }
@@ -49,6 +53,7 @@ class SupportLibServiceWorkerSettingsAdapter implements ServiceWorkerWebSettings
     public void setAllowContentAccess(boolean allow) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.AndroidX.SERVICE_WORKER_SETTINGS_SET_ALLOW_CONTENT_ACCESS")) {
+            recordWebViewApiCall(ApiCall.SERVICE_WORKER_SETTINGS_SET_ALLOW_CONTENT_ACCESS, convertToParameterArray(allow));
             recordApiCall(ApiCall.SERVICE_WORKER_SETTINGS_SET_ALLOW_CONTENT_ACCESS);
             mAwServiceWorkerSettings.setAllowContentAccess(allow);
         }
@@ -58,6 +63,7 @@ class SupportLibServiceWorkerSettingsAdapter implements ServiceWorkerWebSettings
     public boolean getAllowContentAccess() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.AndroidX.SERVICE_WORKER_SETTINGS_GET_ALLOW_CONTENT_ACCESS")) {
+            recordWebViewApiCall(ApiCall.SERVICE_WORKER_SETTINGS_GET_ALLOW_CONTENT_ACCESS, convertToParameterArray());
             recordApiCall(ApiCall.SERVICE_WORKER_SETTINGS_GET_ALLOW_CONTENT_ACCESS);
             return mAwServiceWorkerSettings.getAllowContentAccess();
         }
@@ -67,6 +73,7 @@ class SupportLibServiceWorkerSettingsAdapter implements ServiceWorkerWebSettings
     public void setAllowFileAccess(boolean allow) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.AndroidX.SERVICE_WORKER_SETTINGS_SET_ALLOW_FILE_ACCESS")) {
+            recordWebViewApiCall(ApiCall.SERVICE_WORKER_SETTINGS_SET_ALLOW_FILE_ACCESS, convertToParameterArray(allow));
             recordApiCall(ApiCall.SERVICE_WORKER_SETTINGS_SET_ALLOW_FILE_ACCESS);
             mAwServiceWorkerSettings.setAllowFileAccess(allow);
         }
@@ -76,6 +83,7 @@ class SupportLibServiceWorkerSettingsAdapter implements ServiceWorkerWebSettings
     public boolean getAllowFileAccess() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.AndroidX.SERVICE_WORKER_SETTINGS_GET_ALLOW_FILE_ACCESS")) {
+            recordWebViewApiCall(ApiCall.SERVICE_WORKER_SETTINGS_GET_ALLOW_FILE_ACCESS, convertToParameterArray());
             recordApiCall(ApiCall.SERVICE_WORKER_SETTINGS_GET_ALLOW_FILE_ACCESS);
             return mAwServiceWorkerSettings.getAllowFileAccess();
         }
@@ -85,6 +93,7 @@ class SupportLibServiceWorkerSettingsAdapter implements ServiceWorkerWebSettings
     public void setBlockNetworkLoads(boolean flag) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.AndroidX.SERVICE_WORKER_SETTINGS_SET_BLOCK_NETWORK_LOADS")) {
+            recordWebViewApiCall(ApiCall.SERVICE_WORKER_SETTINGS_SET_BLOCK_NETWORK_LOADS, convertToParameterArray(flag));
             recordApiCall(ApiCall.SERVICE_WORKER_SETTINGS_SET_BLOCK_NETWORK_LOADS);
             mAwServiceWorkerSettings.setBlockNetworkLoads(flag);
         }
@@ -94,6 +103,7 @@ class SupportLibServiceWorkerSettingsAdapter implements ServiceWorkerWebSettings
     public boolean getBlockNetworkLoads() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.AndroidX.SERVICE_WORKER_SETTINGS_GET_BLOCK_NETWORK_LOADS")) {
+            recordWebViewApiCall(ApiCall.SERVICE_WORKER_SETTINGS_GET_BLOCK_NETWORK_LOADS, convertToParameterArray());
             recordApiCall(ApiCall.SERVICE_WORKER_SETTINGS_GET_BLOCK_NETWORK_LOADS);
             return mAwServiceWorkerSettings.getBlockNetworkLoads();
         }
@@ -103,6 +113,7 @@ class SupportLibServiceWorkerSettingsAdapter implements ServiceWorkerWebSettings
     public void setRequestedWithHeaderOriginAllowList(Set<String> allowedOriginRules) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.AndroidX.SERVICE_WORKER_SETTINGS_SET_REQUESTED_WITH_HEADER_ORIGIN_ALLOWLIST")) {
+            recordWebViewApiCall(ApiCall.SERVICE_WORKER_SETTINGS_SET_REQUESTED_WITH_HEADER_ORIGIN_ALLOWLIST, convertToParameterArray(allowedOriginRules));
             recordApiCall(
                     ApiCall.SERVICE_WORKER_SETTINGS_SET_REQUESTED_WITH_HEADER_ORIGIN_ALLOWLIST);
             mAwServiceWorkerSettings.setRequestedWithHeaderOriginAllowList(allowedOriginRules);
@@ -113,6 +124,7 @@ class SupportLibServiceWorkerSettingsAdapter implements ServiceWorkerWebSettings
     public Set<String> getRequestedWithHeaderOriginAllowList() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.AndroidX.SERVICE_WORKER_SETTINGS_GET_REQUESTED_WITH_HEADER_ORIGIN_ALLOWLIST")) {
+            recordWebViewApiCall(ApiCall.SERVICE_WORKER_SETTINGS_GET_REQUESTED_WITH_HEADER_ORIGIN_ALLOWLIST, convertToParameterArray());
             recordApiCall(
                     ApiCall.SERVICE_WORKER_SETTINGS_GET_REQUESTED_WITH_HEADER_ORIGIN_ALLOWLIST);
             return mAwServiceWorkerSettings.getRequestedWithHeaderOriginAllowList();
diff --git a/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibTracingControllerAdapter.java b/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibTracingControllerAdapter.java
index 1797ce6fda..bdd18a01e1 100644
--- a/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibTracingControllerAdapter.java
+++ b/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibTracingControllerAdapter.java
@@ -5,6 +5,8 @@
 package org.chromium.support_lib_glue;
 
 import static org.chromium.support_lib_glue.SupportLibWebViewChromiumFactory.recordApiCall;
+import static org.chromium.support_lib_glue.SupportLibWebViewChromiumFactory.recordWebViewApiCall;
+import static org.chromium.support_lib_glue.SupportLibWebViewChromiumFactory.convertToParameterArray;
 
 import com.android.webview.chromium.SharedTracingControllerAdapter;
 
@@ -30,6 +32,7 @@ public class SupportLibTracingControllerAdapter implements TracingControllerBoun
     public boolean isTracing() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.AndroidX.TRACING_CONTROLLER_IS_TRACING")) {
+            recordWebViewApiCall(ApiCall.TRACING_CONTROLLER_IS_TRACING, convertToParameterArray());
             recordApiCall(ApiCall.TRACING_CONTROLLER_IS_TRACING);
             return mTracingController.isTracing();
         }
@@ -41,6 +44,7 @@ public class SupportLibTracingControllerAdapter implements TracingControllerBoun
             throws IllegalStateException, IllegalArgumentException {
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICall.AndroidX.TRACING_CONTROLLER_START")) {
+            recordWebViewApiCall(ApiCall.TRACING_CONTROLLER_START, convertToParameterArray(predefinedCategories, customIncludedCategories, mode));
             recordApiCall(ApiCall.TRACING_CONTROLLER_START);
             mTracingController.start(predefinedCategories, customIncludedCategories, mode);
         }
@@ -50,6 +54,7 @@ public class SupportLibTracingControllerAdapter implements TracingControllerBoun
     public boolean stop(OutputStream outputStream, Executor executor) {
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICall.AndroidX.TRACING_CONTROLLER_STOP")) {
+            recordWebViewApiCall(ApiCall.TRACING_CONTROLLER_STOP, convertToParameterArray(outputStream, executor));
             recordApiCall(ApiCall.TRACING_CONTROLLER_STOP);
             return mTracingController.stop(outputStream, executor);
         }
diff --git a/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibWebMessageAdapter.java b/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibWebMessageAdapter.java
index e31e53f3ec..92bcd8086c 100644
--- a/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibWebMessageAdapter.java
+++ b/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibWebMessageAdapter.java
@@ -5,6 +5,8 @@
 package org.chromium.support_lib_glue;
 
 import static org.chromium.support_lib_glue.SupportLibWebViewChromiumFactory.recordApiCall;
+import static org.chromium.support_lib_glue.SupportLibWebViewChromiumFactory.recordWebViewApiCall;
+import static org.chromium.support_lib_glue.SupportLibWebViewChromiumFactory.convertToParameterArray;
 
 import org.chromium.base.TraceEvent;
 import org.chromium.content_public.browser.MessagePayload;
@@ -32,6 +34,7 @@ public class SupportLibWebMessageAdapter implements WebMessageBoundaryInterface
     public String getData() {
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICall.AndroidX.WEB_MESSAGE_GET_DATA")) {
+            recordWebViewApiCall(ApiCall.WEB_MESSAGE_GET_DATA, convertToParameterArray());
             recordApiCall(ApiCall.WEB_MESSAGE_GET_DATA);
             return mMessagePayload.getAsString();
         }
@@ -41,6 +44,7 @@ public class SupportLibWebMessageAdapter implements WebMessageBoundaryInterface
     public /* MessagePayload */ InvocationHandler getMessagePayload() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.AndroidX.WEB_MESSAGE_GET_MESSAGE_PAYLOAD")) {
+            recordWebViewApiCall(ApiCall.WEB_MESSAGE_GET_MESSAGE_PAYLOAD, convertToParameterArray());
             recordApiCall(ApiCall.WEB_MESSAGE_GET_MESSAGE_PAYLOAD);
             return new SupportLibWebMessagePayloadAdapter(mMessagePayload).getInvocationHandler();
         }
@@ -50,6 +54,7 @@ public class SupportLibWebMessageAdapter implements WebMessageBoundaryInterface
     public /* WebMessagePort */ InvocationHandler[] getPorts() {
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICall.AndroidX.WEB_MESSAGE_GET_PORTS")) {
+            recordWebViewApiCall(ApiCall.WEB_MESSAGE_GET_PORTS, convertToParameterArray());
             recordApiCall(ApiCall.WEB_MESSAGE_GET_PORTS);
             return SupportLibWebMessagePortAdapter.fromMessagePorts(mPorts);
         }
diff --git a/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibWebMessagePayloadAdapter.java b/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibWebMessagePayloadAdapter.java
index 003599b6b5..ac423b2256 100644
--- a/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibWebMessagePayloadAdapter.java
+++ b/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibWebMessagePayloadAdapter.java
@@ -5,6 +5,8 @@
 package org.chromium.support_lib_glue;
 
 import static org.chromium.support_lib_glue.SupportLibWebViewChromiumFactory.recordApiCall;
+import static org.chromium.support_lib_glue.SupportLibWebViewChromiumFactory.recordWebViewApiCall;
+import static org.chromium.support_lib_glue.SupportLibWebViewChromiumFactory.convertToParameterArray;
 
 import android.annotation.SuppressLint;
 
@@ -44,6 +46,7 @@ class SupportLibWebMessagePayloadAdapter implements WebMessagePayloadBoundaryInt
     public int getType() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.AndroidX.WEB_MESSAGE_PAYLOAD_GET_TYPE")) {
+            recordWebViewApiCall(ApiCall.WEB_MESSAGE_PAYLOAD_GET_TYPE, convertToParameterArray());
             recordApiCall(ApiCall.WEB_MESSAGE_PAYLOAD_GET_TYPE);
             return mMessagePayload.getType();
         }
@@ -54,6 +57,7 @@ class SupportLibWebMessagePayloadAdapter implements WebMessagePayloadBoundaryInt
     public String getAsString() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.AndroidX.WEB_MESSAGE_PAYLOAD_GET_AS_STRING")) {
+            recordWebViewApiCall(ApiCall.WEB_MESSAGE_PAYLOAD_GET_AS_STRING, convertToParameterArray());
             recordApiCall(ApiCall.WEB_MESSAGE_PAYLOAD_GET_AS_STRING);
             return mMessagePayload.getAsString();
         }
@@ -64,6 +68,7 @@ class SupportLibWebMessagePayloadAdapter implements WebMessagePayloadBoundaryInt
     public byte[] getAsArrayBuffer() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.AndroidX.WEB_MESSAGE_PAYLOAD_GET_AS_ARRAY_BUFFER")) {
+            recordWebViewApiCall(ApiCall.WEB_MESSAGE_PAYLOAD_GET_AS_ARRAY_BUFFER, convertToParameterArray());
             recordApiCall(ApiCall.WEB_MESSAGE_PAYLOAD_GET_AS_ARRAY_BUFFER);
             return mMessagePayload.getAsArrayBuffer();
         }
diff --git a/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibWebMessagePortAdapter.java b/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibWebMessagePortAdapter.java
index f92bebd56a..a869af0803 100644
--- a/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibWebMessagePortAdapter.java
+++ b/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibWebMessagePortAdapter.java
@@ -5,6 +5,8 @@
 package org.chromium.support_lib_glue;
 
 import static org.chromium.support_lib_glue.SupportLibWebViewChromiumFactory.recordApiCall;
+import static org.chromium.support_lib_glue.SupportLibWebViewChromiumFactory.recordWebViewApiCall;
+import static org.chromium.support_lib_glue.SupportLibWebViewChromiumFactory.convertToParameterArray;
 
 import android.os.Handler;
 
@@ -39,6 +41,7 @@ class SupportLibWebMessagePortAdapter implements WebMessagePortBoundaryInterface
     public void postMessage(InvocationHandler message) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.AndroidX.WEB_MESSAGE_PORT_POST_MESSAGE")) {
+            recordWebViewApiCall(ApiCall.WEB_MESSAGE_PORT_POST_MESSAGE, convertToParameterArray(message));
             recordApiCall(ApiCall.WEB_MESSAGE_PORT_POST_MESSAGE);
             WebMessageBoundaryInterface messageBoundaryInterface =
                     BoundaryInterfaceReflectionUtil.castToSuppLibClass(
@@ -53,6 +56,7 @@ class SupportLibWebMessagePortAdapter implements WebMessagePortBoundaryInterface
     public void close() {
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICall.AndroidX.WEB_MESSAGE_PORT_CLOSE")) {
+            recordWebViewApiCall(ApiCall.WEB_MESSAGE_PORT_CLOSE, convertToParameterArray());
             recordApiCall(ApiCall.WEB_MESSAGE_PORT_CLOSE);
             mPort.close();
         }
@@ -62,6 +66,7 @@ class SupportLibWebMessagePortAdapter implements WebMessagePortBoundaryInterface
     public void setWebMessageCallback(InvocationHandler callback) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.AndroidX.WEB_MESSAGE_PORT_SET_CALLBACK")) {
+            recordWebViewApiCall(ApiCall.WEB_MESSAGE_PORT_SET_CALLBACK, convertToParameterArray(callback));
             recordApiCall(ApiCall.WEB_MESSAGE_PORT_SET_CALLBACK);
             setWebMessageCallbackInternal(callback, null);
         }
@@ -71,6 +76,8 @@ class SupportLibWebMessagePortAdapter implements WebMessagePortBoundaryInterface
     public void setWebMessageCallback(InvocationHandler callback, Handler handler) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.AndroidX.WEB_MESSAGE_PORT_SET_CALLBACK_WITH_HANDLER")) {
+            recordWebViewApiCall(ApiCall.WEB_MESSAGE_PORT_SET_CALLBACK_WITH_HANDLER,
+                    convertToParameterArray(callback, handler));
             recordApiCall(ApiCall.WEB_MESSAGE_PORT_SET_CALLBACK_WITH_HANDLER);
             setWebMessageCallbackInternal(callback, handler);
         }
diff --git a/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibWebResourceRequest.java b/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibWebResourceRequest.java
index 06a1b8713d..91b321f6bf 100644
--- a/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibWebResourceRequest.java
+++ b/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibWebResourceRequest.java
@@ -5,6 +5,8 @@
 package org.chromium.support_lib_glue;
 
 import static org.chromium.support_lib_glue.SupportLibWebViewChromiumFactory.recordApiCall;
+import static org.chromium.support_lib_glue.SupportLibWebViewChromiumFactory.recordWebViewApiCall;
+import static org.chromium.support_lib_glue.SupportLibWebViewChromiumFactory.convertToParameterArray;
 
 import org.chromium.android_webview.AwContentsClient.AwWebResourceRequest;
 import org.chromium.android_webview.common.Lifetime;
@@ -27,6 +29,7 @@ public class SupportLibWebResourceRequest implements WebResourceRequestBoundaryI
     public boolean isRedirect() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.AndroidX.WEB_RESOURCE_REQUEST_IS_REDIRECT")) {
+            recordWebViewApiCall(ApiCall.WEB_RESOURCE_REQUEST_IS_REDIRECT, convertToParameterArray());
             recordApiCall(ApiCall.WEB_RESOURCE_REQUEST_IS_REDIRECT);
             return mAwRequest.isRedirect;
         }
diff --git a/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibWebSettingsAdapter.java b/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibWebSettingsAdapter.java
index f9de5699a3..349d1866c8 100644
--- a/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibWebSettingsAdapter.java
+++ b/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibWebSettingsAdapter.java
@@ -5,6 +5,8 @@
 package org.chromium.support_lib_glue;
 
 import static org.chromium.support_lib_glue.SupportLibWebViewChromiumFactory.recordApiCall;
+import static org.chromium.support_lib_glue.SupportLibWebViewChromiumFactory.recordWebViewApiCall;
+import static org.chromium.support_lib_glue.SupportLibWebViewChromiumFactory.convertToParameterArray;
 
 import android.webkit.WebSettings;
 
@@ -33,6 +35,7 @@ class SupportLibWebSettingsAdapter implements WebSettingsBoundaryInterface {
     public void setOffscreenPreRaster(boolean enabled) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.AndroidX.WEB_SETTINGS_SET_OFFSCREEN_PRE_RASTER")) {
+            recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_OFFSCREEN_PRE_RASTER, convertToParameterArray(enabled));
             recordApiCall(ApiCall.WEB_SETTINGS_SET_OFFSCREEN_PRE_RASTER);
             mAwSettings.setOffscreenPreRaster(enabled);
         }
@@ -42,6 +45,7 @@ class SupportLibWebSettingsAdapter implements WebSettingsBoundaryInterface {
     public boolean getOffscreenPreRaster() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.AndroidX.WEB_SETTINGS_GET_OFFSCREEN_PRE_RASTER")) {
+            recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_OFFSCREEN_PRE_RASTER, convertToParameterArray());
             recordApiCall(ApiCall.WEB_SETTINGS_GET_OFFSCREEN_PRE_RASTER);
             return mAwSettings.getOffscreenPreRaster();
         }
@@ -51,6 +55,7 @@ class SupportLibWebSettingsAdapter implements WebSettingsBoundaryInterface {
     public void setSafeBrowsingEnabled(boolean enabled) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.AndroidX.WEB_SETTINGS_SET_SAFE_BROWSING_ENABLED")) {
+            recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_SAFE_BROWSING_ENABLED, convertToParameterArray(enabled));
             recordApiCall(ApiCall.WEB_SETTINGS_SET_SAFE_BROWSING_ENABLED);
             mAwSettings.setSafeBrowsingEnabled(enabled);
         }
@@ -60,6 +65,7 @@ class SupportLibWebSettingsAdapter implements WebSettingsBoundaryInterface {
     public boolean getSafeBrowsingEnabled() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.AndroidX.WEB_SETTINGS_GET_SAFE_BROWSING_ENABLED")) {
+            recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_SAFE_BROWSING_ENABLED, convertToParameterArray());
             recordApiCall(ApiCall.WEB_SETTINGS_GET_SAFE_BROWSING_ENABLED);
             return mAwSettings.getSafeBrowsingEnabled();
         }
@@ -69,6 +75,7 @@ class SupportLibWebSettingsAdapter implements WebSettingsBoundaryInterface {
     public void setDisabledActionModeMenuItems(int menuItems) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.AndroidX.WEB_SETTINGS_SET_DISABLED_ACTION_MODE_MENU_ITEMS")) {
+            recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_DISABLED_ACTION_MODE_MENU_ITEMS, convertToParameterArray(menuItems));
             recordApiCall(ApiCall.WEB_SETTINGS_SET_DISABLED_ACTION_MODE_MENU_ITEMS);
             mAwSettings.setDisabledActionModeMenuItems(menuItems);
         }
@@ -78,6 +85,7 @@ class SupportLibWebSettingsAdapter implements WebSettingsBoundaryInterface {
     public int getDisabledActionModeMenuItems() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.AndroidX.WEB_SETTINGS_GET_DISABLED_ACTION_MODE_MENU_ITEMS")) {
+            recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_DISABLED_ACTION_MODE_MENU_ITEMS, convertToParameterArray());
             recordApiCall(ApiCall.WEB_SETTINGS_GET_DISABLED_ACTION_MODE_MENU_ITEMS);
             return mAwSettings.getDisabledActionModeMenuItems();
         }
@@ -87,6 +95,7 @@ class SupportLibWebSettingsAdapter implements WebSettingsBoundaryInterface {
     public boolean getWillSuppressErrorPage() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.AndroidX.WEB_SETTINGS_GET_WILL_SUPPRESS_ERROR_PAGE")) {
+            recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_WILL_SUPPRESS_ERROR_PAGE, convertToParameterArray());
             recordApiCall(ApiCall.WEB_SETTINGS_GET_WILL_SUPPRESS_ERROR_PAGE);
             return mAwSettings.getWillSuppressErrorPage();
         }
@@ -96,6 +105,7 @@ class SupportLibWebSettingsAdapter implements WebSettingsBoundaryInterface {
     public void setWillSuppressErrorPage(boolean suppressed) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.AndroidX.WEB_SETTINGS_SET_WILL_SUPPRESS_ERROR_PAGE")) {
+            recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_WILL_SUPPRESS_ERROR_PAGE, convertToParameterArray(suppressed));
             recordApiCall(ApiCall.WEB_SETTINGS_SET_WILL_SUPPRESS_ERROR_PAGE);
             mAwSettings.setWillSuppressErrorPage(suppressed);
         }
@@ -109,6 +119,7 @@ class SupportLibWebSettingsAdapter implements WebSettingsBoundaryInterface {
         }
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICall.AndroidX.WEB_SETTINGS_SET_FORCE_DARK")) {
+            recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_FORCE_DARK, convertToParameterArray(forceDarkMode));
             recordApiCall(ApiCall.WEB_SETTINGS_SET_FORCE_DARK);
             mAwSettings.setForceDarkMode(forceDarkMode);
         }
@@ -118,6 +129,7 @@ class SupportLibWebSettingsAdapter implements WebSettingsBoundaryInterface {
     public int getForceDark() {
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICall.AndroidX.WEB_SETTINGS_GET_FORCE_DARK")) {
+            recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_FORCE_DARK, convertToParameterArray());
             recordApiCall(ApiCall.WEB_SETTINGS_GET_FORCE_DARK);
             if (AwDarkMode.isSimplifiedDarkModeEnabled()) {
                 Log.w(TAG, "getForceDark() is a no-op in an app with targetSdkVersion>=T");
@@ -131,6 +143,7 @@ class SupportLibWebSettingsAdapter implements WebSettingsBoundaryInterface {
     public void setForceDarkBehavior(int forceDarkBehavior) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.AndroidX.WEB_SETTINGS_SET_FORCE_DARK_BEHAVIOR")) {
+            recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_FORCE_DARK_BEHAVIOR, convertToParameterArray(forceDarkBehavior));
             recordApiCall(ApiCall.WEB_SETTINGS_SET_FORCE_DARK_BEHAVIOR);
             if (AwDarkMode.isSimplifiedDarkModeEnabled()) {
                 Log.w(TAG, "setForceDarkBehavior() is a no-op in an app with targetSdkVersion>=T");
@@ -154,6 +167,7 @@ class SupportLibWebSettingsAdapter implements WebSettingsBoundaryInterface {
     public int getForceDarkBehavior() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.AndroidX.WEB_SETTINGS_GET_FORCE_DARK_BEHAVIOR")) {
+            recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_FORCE_DARK_BEHAVIOR, convertToParameterArray());
             recordApiCall(ApiCall.WEB_SETTINGS_GET_FORCE_DARK_BEHAVIOR);
             if (AwDarkMode.isSimplifiedDarkModeEnabled()) {
                 Log.w(TAG, "getForceDarkBehavior() is a no-op in an app with targetSdkVersion>=T");
@@ -175,6 +189,7 @@ class SupportLibWebSettingsAdapter implements WebSettingsBoundaryInterface {
     public void setAlgorithmicDarkeningAllowed(boolean allow) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.AndroidX.WEB_SETTINGS_SET_ALGORITHMIC_DARKENING_ALLOWED")) {
+            recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_ALGORITHMIC_DARKENING_ALLOWED, convertToParameterArray(allow));
             recordApiCall(ApiCall.WEB_SETTINGS_SET_ALGORITHMIC_DARKENING_ALLOWED);
             if (!AwDarkMode.isSimplifiedDarkModeEnabled()) {
                 Log.w(TAG,
@@ -190,6 +205,7 @@ class SupportLibWebSettingsAdapter implements WebSettingsBoundaryInterface {
     public boolean isAlgorithmicDarkeningAllowed() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.AndroidX.WEB_SETTINGS_IS_ALGORITHMIC_DARKENING_ALLOWED")) {
+            recordWebViewApiCall(ApiCall.WEB_SETTINGS_IS_ALGORITHMIC_DARKENING_ALLOWED, convertToParameterArray());
             recordApiCall(ApiCall.WEB_SETTINGS_IS_ALGORITHMIC_DARKENING_ALLOWED);
             if (!AwDarkMode.isSimplifiedDarkModeEnabled()) {
                 Log.w(TAG,
@@ -216,6 +232,7 @@ class SupportLibWebSettingsAdapter implements WebSettingsBoundaryInterface {
     public void setRequestedWithHeaderOriginAllowList(Set<String> allowedOriginRules) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.AndroidX.WEB_SETTINGS_SET_REQUESTED_WITH_HEADER_ORIGIN_ALLOWLIST")) {
+            recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_REQUESTED_WITH_HEADER_ORIGIN_ALLOWLIST, convertToParameterArray(allowedOriginRules));
             recordApiCall(ApiCall.WEB_SETTINGS_SET_REQUESTED_WITH_HEADER_ORIGIN_ALLOWLIST);
             mAwSettings.setRequestedWithHeaderOriginAllowList(allowedOriginRules);
         }
@@ -225,6 +242,7 @@ class SupportLibWebSettingsAdapter implements WebSettingsBoundaryInterface {
     public Set<String> getRequestedWithHeaderOriginAllowList() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.AndroidX.WEB_SETTINGS_GET_REQUESTED_WITH_HEADER_ORIGIN_ALLOWLIST")) {
+            recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_REQUESTED_WITH_HEADER_ORIGIN_ALLOWLIST, convertToParameterArray());
             recordApiCall(ApiCall.WEB_SETTINGS_GET_REQUESTED_WITH_HEADER_ORIGIN_ALLOWLIST);
             return mAwSettings.getRequestedWithHeaderOriginAllowList();
         }
@@ -234,6 +252,7 @@ class SupportLibWebSettingsAdapter implements WebSettingsBoundaryInterface {
     public void setEnterpriseAuthenticationAppLinkPolicyEnabled(boolean enabled) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.AndroidX.WEB_SETTINGS_SET_ENTERPRISE_AUTHENTICATION_APP_LINK_POLICY_ENABLED")) {
+            recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_ENTERPRISE_AUTHENTICATION_APP_LINK_POLICY_ENABLED, convertToParameterArray(enabled));
             recordApiCall(
                     ApiCall.WEB_SETTINGS_SET_ENTERPRISE_AUTHENTICATION_APP_LINK_POLICY_ENABLED);
             mAwSettings.setEnterpriseAuthenticationAppLinkPolicyEnabled(enabled);
@@ -243,6 +262,7 @@ class SupportLibWebSettingsAdapter implements WebSettingsBoundaryInterface {
     public boolean getEnterpriseAuthenticationAppLinkPolicyEnabled() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.AndroidX.WEB_SETTINGS_GET_ENTERPRISE_AUTHENTICATION_APP_LINK_POLICY_ENABLED")) {
+            recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_ENTERPRISE_AUTHENTICATION_APP_LINK_POLICY_ENABLED, convertToParameterArray());
             recordApiCall(
                     ApiCall.WEB_SETTINGS_GET_ENTERPRISE_AUTHENTICATION_APP_LINK_POLICY_ENABLED);
             return mAwSettings.getEnterpriseAuthenticationAppLinkPolicyEnabled();
@@ -253,6 +273,7 @@ class SupportLibWebSettingsAdapter implements WebSettingsBoundaryInterface {
     public void setUserAgentMetadataFromMap(Map<String, Object> uaMetadata) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.AndroidX.WEB_SETTINGS_SET_USER_AGENT_METADATA")) {
+            recordWebViewApiCall(ApiCall.WEB_SETTINGS_SET_USER_AGENT_METADATA, convertToParameterArray(uaMetadata));
             recordApiCall(ApiCall.WEB_SETTINGS_SET_USER_AGENT_METADATA);
             mAwSettings.setUserAgentMetadataFromMap(uaMetadata);
         }
@@ -261,6 +282,7 @@ class SupportLibWebSettingsAdapter implements WebSettingsBoundaryInterface {
     public Map<String, Object> getUserAgentMetadataMap() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.AndroidX.WEB_SETTINGS_GET_USER_AGENT_METADATA")) {
+            recordWebViewApiCall(ApiCall.WEB_SETTINGS_GET_USER_AGENT_METADATA, convertToParameterArray());
             recordApiCall(ApiCall.WEB_SETTINGS_GET_USER_AGENT_METADATA);
             return mAwSettings.getUserAgentMetadataMap();
         }
diff --git a/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibWebViewChromium.java b/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibWebViewChromium.java
index 1a6cfd5373..db19961055 100644
--- a/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibWebViewChromium.java
+++ b/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibWebViewChromium.java
@@ -5,6 +5,8 @@
 package org.chromium.support_lib_glue;
 
 import static org.chromium.support_lib_glue.SupportLibWebViewChromiumFactory.recordApiCall;
+import static org.chromium.support_lib_glue.SupportLibWebViewChromiumFactory.recordWebViewApiCall;
+import static org.chromium.support_lib_glue.SupportLibWebViewChromiumFactory.convertToParameterArray;
 
 import android.net.Uri;
 import android.webkit.WebChromeClient;
@@ -46,6 +48,7 @@ class SupportLibWebViewChromium implements WebViewProviderBoundaryInterface {
     public void insertVisualStateCallback(long requestId, InvocationHandler callbackInvoHandler) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.AndroidX.INSERT_VISUAL_STATE_CALLBACK")) {
+            recordWebViewApiCall(ApiCall.INSERT_VISUAL_STATE_CALLBACK, convertToParameterArray(requestId, callbackInvoHandler));
             recordApiCall(ApiCall.INSERT_VISUAL_STATE_CALLBACK);
             final VisualStateCallbackBoundaryInterface visualStateCallback =
                     BoundaryInterfaceReflectionUtil.castToSuppLibClass(
@@ -65,6 +68,7 @@ class SupportLibWebViewChromium implements WebViewProviderBoundaryInterface {
     public /* WebMessagePort */ InvocationHandler[] createWebMessageChannel() {
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICall.AndroidX.CREATE_WEB_MESSAGE_CHANNEL")) {
+            recordWebViewApiCall(ApiCall.CREATE_WEB_MESSAGE_CHANNEL, convertToParameterArray());
             recordApiCall(ApiCall.CREATE_WEB_MESSAGE_CHANNEL);
             return SupportLibWebMessagePortAdapter.fromMessagePorts(
                     mSharedWebViewChromium.createWebMessageChannel());
@@ -76,6 +80,7 @@ class SupportLibWebViewChromium implements WebViewProviderBoundaryInterface {
             /* WebMessage */ InvocationHandler message, Uri targetOrigin) {
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICall.AndroidX.POST_MESSAGE_TO_MAIN_FRAME")) {
+            recordWebViewApiCall(ApiCall.POST_MESSAGE_TO_MAIN_FRAME, convertToParameterArray(message, targetOrigin));
             recordApiCall(ApiCall.POST_MESSAGE_TO_MAIN_FRAME);
             WebMessageBoundaryInterface messageBoundaryInterface =
                     BoundaryInterfaceReflectionUtil.castToSuppLibClass(
@@ -94,6 +99,7 @@ class SupportLibWebViewChromium implements WebViewProviderBoundaryInterface {
             /* WebMessageListener */ InvocationHandler listener) {
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICall.AndroidX.ADD_WEB_MESSAGE_LISTENER")) {
+            recordWebViewApiCall(ApiCall.ADD_WEB_MESSAGE_LISTENER, convertToParameterArray(jsObjectName, allowedOriginRules, listener));
             recordApiCall(ApiCall.ADD_WEB_MESSAGE_LISTENER);
             mSharedWebViewChromium.addWebMessageListener(jsObjectName, allowedOriginRules,
                     new SupportLibWebMessageListenerAdapter(mWebView, listener));
@@ -104,6 +110,7 @@ class SupportLibWebViewChromium implements WebViewProviderBoundaryInterface {
     public void removeWebMessageListener(final String jsObjectName) {
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICall.AndroidX.REMOVE_WEB_MESSAGE_LISTENER")) {
+            recordWebViewApiCall(ApiCall.REMOVE_WEB_MESSAGE_LISTENER, convertToParameterArray(jsObjectName));
             recordApiCall(ApiCall.REMOVE_WEB_MESSAGE_LISTENER);
             mSharedWebViewChromium.removeWebMessageListener(jsObjectName);
         }
@@ -114,6 +121,7 @@ class SupportLibWebViewChromium implements WebViewProviderBoundaryInterface {
             final String script, final String[] allowedOriginRules) {
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICall.AndroidX.ADD_DOCUMENT_START_SCRIPT")) {
+            recordWebViewApiCall(ApiCall.ADD_DOCUMENT_START_SCRIPT, convertToParameterArray(script, allowedOriginRules));
             recordApiCall(ApiCall.ADD_DOCUMENT_START_SCRIPT);
             return BoundaryInterfaceReflectionUtil.createInvocationHandlerFor(
                     new SupportLibScriptHandlerAdapter(
@@ -125,6 +133,7 @@ class SupportLibWebViewChromium implements WebViewProviderBoundaryInterface {
     @Override
     public WebViewClient getWebViewClient() {
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.AndroidX.GET_WEBVIEW_CLIENT")) {
+            recordWebViewApiCall(ApiCall.GET_WEBVIEW_CLIENT, convertToParameterArray());
             recordApiCall(ApiCall.GET_WEBVIEW_CLIENT);
             return mSharedWebViewChromium.getWebViewClient();
         }
@@ -134,6 +143,7 @@ class SupportLibWebViewChromium implements WebViewProviderBoundaryInterface {
     public WebChromeClient getWebChromeClient() {
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICall.AndroidX.GET_WEBCHROME_CLIENT")) {
+            recordWebViewApiCall(ApiCall.GET_WEBCHROME_CLIENT, convertToParameterArray());
             recordApiCall(ApiCall.GET_WEBCHROME_CLIENT);
             return mSharedWebViewChromium.getWebChromeClient();
         }
@@ -143,6 +153,7 @@ class SupportLibWebViewChromium implements WebViewProviderBoundaryInterface {
     public /* WebViewRenderer */ InvocationHandler getWebViewRenderer() {
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICall.AndroidX.GET_WEBVIEW_RENDERER")) {
+            recordWebViewApiCall(ApiCall.GET_WEBVIEW_RENDERER, convertToParameterArray());
             recordApiCall(ApiCall.GET_WEBVIEW_RENDERER);
             return BoundaryInterfaceReflectionUtil.createInvocationHandlerFor(
                     new SupportLibWebViewRendererAdapter(
@@ -154,6 +165,7 @@ class SupportLibWebViewChromium implements WebViewProviderBoundaryInterface {
     public /* WebViewRendererClient */ InvocationHandler getWebViewRendererClient() {
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICall.AndroidX.GET_WEBVIEW_RENDERER_CLIENT")) {
+            recordWebViewApiCall(ApiCall.GET_WEBVIEW_RENDERER_CLIENT, convertToParameterArray());
             recordApiCall(ApiCall.GET_WEBVIEW_RENDERER_CLIENT);
             SharedWebViewRendererClientAdapter webViewRendererClientAdapter =
                     mSharedWebViewChromium.getWebViewRendererClientAdapter();
@@ -168,6 +180,7 @@ class SupportLibWebViewChromium implements WebViewProviderBoundaryInterface {
             /* WebViewRendererClient */ InvocationHandler webViewRendererClient) {
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICall.AndroidX.SET_WEBVIEW_RENDERER_CLIENT")) {
+            recordWebViewApiCall(ApiCall.SET_WEBVIEW_RENDERER_CLIENT, convertToParameterArray(webViewRendererClient));
             recordApiCall(ApiCall.SET_WEBVIEW_RENDERER_CLIENT);
             mSharedWebViewChromium.setWebViewRendererClientAdapter(webViewRendererClient != null
                             ? new SupportLibWebViewRendererClientAdapter(webViewRendererClient)
@@ -178,6 +191,7 @@ class SupportLibWebViewChromium implements WebViewProviderBoundaryInterface {
     @Override
     public void setProfile(String profileName) {
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.AndroidX.SET_WEBVIEW_PROFILE")) {
+            recordWebViewApiCall(ApiCall.SET_WEBVIEW_PROFILE, convertToParameterArray(profileName));
             recordApiCall(ApiCall.SET_WEBVIEW_PROFILE);
             mSharedWebViewChromium.setProfile(profileName);
         }
@@ -186,6 +200,7 @@ class SupportLibWebViewChromium implements WebViewProviderBoundaryInterface {
     @Override
     public /* Profile */ InvocationHandler getProfile() {
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.AndroidX.GET_WEBVIEW_PROFILE")) {
+            recordWebViewApiCall(ApiCall.GET_WEBVIEW_PROFILE, convertToParameterArray());
             recordApiCall(ApiCall.GET_WEBVIEW_PROFILE);
             return BoundaryInterfaceReflectionUtil.createInvocationHandlerFor(
                     new SupportLibProfile(mSharedWebViewChromium.getProfile()));
diff --git a/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibWebViewChromiumFactory.java b/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibWebViewChromiumFactory.java
index 40d4386fdb..2a4c52a5a1 100644
--- a/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibWebViewChromiumFactory.java
+++ b/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibWebViewChromiumFactory.java
@@ -8,6 +8,7 @@ import android.content.Context;
 import android.net.Uri;
 import android.webkit.ValueCallback;
 import android.webkit.WebView;
+import android.util.Log;
 
 import androidx.annotation.IntDef;
 
@@ -25,10 +26,15 @@ import org.chromium.support_lib_boundary.WebViewProviderFactoryBoundaryInterface
 import org.chromium.support_lib_boundary.util.BoundaryInterfaceReflectionUtil;
 import org.chromium.support_lib_boundary.util.Features;
 
+import org.json.JSONObject;
+import org.json.JSONException;
+import org.json.JSONArray;
+
 import java.lang.reflect.InvocationHandler;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Set;
+import java.util.Arrays;
 
 /**
  * Support library glue version of WebViewChromiumFactoryProvider.
@@ -310,6 +316,79 @@ class SupportLibWebViewChromiumFactory implements WebViewProviderFactoryBoundary
                 "Android.WebView.AndroidX.ApiCall", apiCall, ApiCall.COUNT);
     }
 
+public static String LOG_API_TAG = "CUSTOM_WEBVIEW_X_API_CALL";
+
+   /**
+     * Converts the given parameters to an array of Objects.
+     * @param params The parameters to convert.
+     * @return An array of Objects.
+     */
+    public static Object[] convertToParameterArray(Object... params) {
+        return params;
+    }
+
+    /**
+     * Records a WebView API call by logging it.
+     * @param sample The API number.
+     * @param parameters The API parameters.
+     */
+    public static void recordWebViewApiCall(int sample, Object[] parameters) {
+        JSONArray parameterArray = parametersToJSONArray(parameters);
+        JSONObject json = new JSONObject();
+        try {
+            json.put("api", sample);
+            json.put("params", parameterArray);
+        } catch (JSONException e) {
+            assert false;
+        }
+        Log.i(LOG_API_TAG, json.toString());
+    }
+
+
+    /**
+     * Checks if the given object is an array.
+     * @param object The object to check.
+     * @return True if the object is an array, false otherwise.
+     */
+    public static boolean isArray(Object object) {
+        return  object instanceof Object[] || object instanceof byte[] || object instanceof short[] ||
+                object instanceof int[] || object instanceof long[] || object instanceof float[] ||
+                object instanceof double[] ||object instanceof char[] || object instanceof boolean[];
+    }
+
+    /**
+     * Converts the given parameters to a JSONArray.
+     * @param parameters The parameters to convert.
+     * @return A JSONArray.
+     */
+    public static JSONArray parametersToJSONArray(Object[] parameters) {
+        JSONArray jsonArray = new JSONArray();
+        if (parameters != null) {
+            for (Object parameter : parameters) {
+                if (isArray(parameter)) {
+                    jsonArray.put(arrayToJSONArray(parameter));
+                } else {
+                    jsonArray.put(parameter);
+                }
+            }
+        }
+        return jsonArray;
+    }
+
+    /**
+     * Converts the given array to a JSONArray.
+     * @param object The array to convert.
+     * @return A JSONArray.
+     */
+    public static JSONArray arrayToJSONArray(Object object) {
+        try {
+            return new JSONArray(object);
+        } catch (JSONException e) {
+            e.printStackTrace();
+        }
+        return null;
+    }
+
     // Initialization guarded by mAwInit.getLock()
     private InvocationHandler mStatics;
     private InvocationHandler mServiceWorkerController;
@@ -327,6 +406,7 @@ class SupportLibWebViewChromiumFactory implements WebViewProviderFactoryBoundary
     @Override
     public /* WebViewProvider */ InvocationHandler createWebView(WebView webView) {
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.AndroidX.CREATE_WEBVIEW")) {
+            recordWebViewApiCall(ApiCall.CREATE_WEBVIEW, convertToParameterArray(webView));
             recordApiCall(ApiCall.CREATE_WEBVIEW);
             return BoundaryInterfaceReflectionUtil.createInvocationHandlerFor(
                     new SupportLibWebViewChromium(webView));
@@ -349,6 +429,8 @@ class SupportLibWebViewChromiumFactory implements WebViewProviderFactoryBoundary
         public void initSafeBrowsing(Context context, ValueCallback<Boolean> callback) {
             try (TraceEvent event =
                             TraceEvent.scoped("WebView.APICall.AndroidX.INIT_SAFE_BROWSING")) {
+                recordWebViewApiCall(ApiCall.INIT_SAFE_BROWSING,
+                        convertToParameterArray(context, callback));
                 recordApiCall(ApiCall.INIT_SAFE_BROWSING);
                 mSharedStatics.initSafeBrowsing(
                         context, CallbackConverter.fromValueCallback(callback));
@@ -359,6 +441,8 @@ class SupportLibWebViewChromiumFactory implements WebViewProviderFactoryBoundary
         public void setSafeBrowsingAllowlist(Set<String> hosts, ValueCallback<Boolean> callback) {
             try (TraceEvent event = TraceEvent.scoped(
                          "WebView.APICall.AndroidX.SET_SAFE_BROWSING_ALLOWLIST")) {
+                recordWebViewApiCall(ApiCall.SET_SAFE_BROWSING_ALLOWLIST,
+                        convertToParameterArray(hosts, callback));
                 recordApiCall(ApiCall.SET_SAFE_BROWSING_ALLOWLIST);
                 mSharedStatics.setSafeBrowsingAllowlist(
                         new ArrayList<>(hosts), CallbackConverter.fromValueCallback(callback));
@@ -369,6 +453,8 @@ class SupportLibWebViewChromiumFactory implements WebViewProviderFactoryBoundary
         public void setSafeBrowsingWhitelist(List<String> hosts, ValueCallback<Boolean> callback) {
             try (TraceEvent event = TraceEvent.scoped(
                          "WebView.APICall.AndroidX.SET_SAFE_BROWSING_ALLOWLIST_DEPRECATED_NAME")) {
+                recordWebViewApiCall(ApiCall.SET_SAFE_BROWSING_ALLOWLIST_DEPRECATED_NAME,
+                        convertToParameterArray(hosts, callback));
                 recordApiCall(ApiCall.SET_SAFE_BROWSING_ALLOWLIST_DEPRECATED_NAME);
                 mSharedStatics.setSafeBrowsingAllowlist(
                         hosts, CallbackConverter.fromValueCallback(callback));
@@ -379,6 +465,8 @@ class SupportLibWebViewChromiumFactory implements WebViewProviderFactoryBoundary
         public Uri getSafeBrowsingPrivacyPolicyUrl() {
             try (TraceEvent event = TraceEvent.scoped(
                          "WebView.APICall.AndroidX.GET_SAFE_BROWSING_PRIVACY_POLICY_URL")) {
+                recordWebViewApiCall(ApiCall.GET_SAFE_BROWSING_PRIVACY_POLICY_URL,
+                        convertToParameterArray());
                 recordApiCall(ApiCall.GET_SAFE_BROWSING_PRIVACY_POLICY_URL);
                 return mSharedStatics.getSafeBrowsingPrivacyPolicyUrl();
             }
@@ -388,6 +476,8 @@ class SupportLibWebViewChromiumFactory implements WebViewProviderFactoryBoundary
         public boolean isMultiProcessEnabled() {
             try (TraceEvent event = TraceEvent.scoped(
                          "WebView.APICall.AndroidX.IS_MULTI_PROCESS_ENABLED")) {
+                recordWebViewApiCall(ApiCall.IS_MULTI_PROCESS_ENABLED,
+                        convertToParameterArray());
                 recordApiCall(ApiCall.IS_MULTI_PROCESS_ENABLED);
                 return mSharedStatics.isMultiProcessEnabled();
             }
@@ -397,6 +487,7 @@ class SupportLibWebViewChromiumFactory implements WebViewProviderFactoryBoundary
         public String getVariationsHeader() {
             try (TraceEvent event =
                             TraceEvent.scoped("WebView.APICall.AndroidX.GET_VARIATIONS_HEADER")) {
+                recordWebViewApiCall(ApiCall.GET_VARIATIONS_HEADER, convertToParameterArray());
                 recordApiCall(ApiCall.GET_VARIATIONS_HEADER);
                 return mSharedStatics.getVariationsHeader();
             }
@@ -406,6 +497,7 @@ class SupportLibWebViewChromiumFactory implements WebViewProviderFactoryBoundary
     @Override
     public InvocationHandler getStatics() {
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.AndroidX.GET_STATICS")) {
+            recordWebViewApiCall(ApiCall.GET_STATICS, convertToParameterArray());
             recordApiCall(ApiCall.GET_STATICS);
             synchronized (mAwInit.getLock()) {
                 if (mStatics == null) {
@@ -427,6 +519,8 @@ class SupportLibWebViewChromiumFactory implements WebViewProviderFactoryBoundary
     public InvocationHandler getServiceWorkerController() {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.AndroidX.GET_SERVICE_WORKER_CONTROLLER")) {
+            recordWebViewApiCall(ApiCall.GET_SERVICE_WORKER_CONTROLLER,
+                    convertToParameterArray());
             recordApiCall(ApiCall.GET_SERVICE_WORKER_CONTROLLER);
             synchronized (mAwInit.getLock()) {
                 if (mServiceWorkerController == null) {
@@ -444,6 +538,7 @@ class SupportLibWebViewChromiumFactory implements WebViewProviderFactoryBoundary
     public InvocationHandler getTracingController() {
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICall.AndroidX.GET_TRACING_CONTROLLER")) {
+            recordWebViewApiCall(ApiCall.GET_TRACING_CONTROLLER, convertToParameterArray());
             recordApiCall(ApiCall.GET_TRACING_CONTROLLER);
             synchronized (mAwInit.getLock()) {
                 if (mTracingController == null) {
@@ -491,6 +586,7 @@ class SupportLibWebViewChromiumFactory implements WebViewProviderFactoryBoundary
     @Override
     public InvocationHandler getProfileStore() {
         try (TraceEvent event = TraceEvent.scoped("WebView.APICall.AndroidX.GET_PROFILE_STORE")) {
+            recordWebViewApiCall(ApiCall.GET_PROFILE_STORE, convertToParameterArray());
             recordApiCall(ApiCall.GET_PROFILE_STORE);
             synchronized (mAwInit.getLock()) {
                 if (mProfileStore == null) {
diff --git a/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibWebViewCookieManagerAdapter.java b/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibWebViewCookieManagerAdapter.java
index d58ae91c01..b4eab7ca6a 100644
--- a/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibWebViewCookieManagerAdapter.java
+++ b/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibWebViewCookieManagerAdapter.java
@@ -5,6 +5,8 @@
 package org.chromium.support_lib_glue;
 
 import static org.chromium.support_lib_glue.SupportLibWebViewChromiumFactory.recordApiCall;
+import static org.chromium.support_lib_glue.SupportLibWebViewChromiumFactory.recordWebViewApiCall;
+import static org.chromium.support_lib_glue.SupportLibWebViewChromiumFactory.convertToParameterArray;
 
 import org.chromium.android_webview.AwCookieManager;
 import org.chromium.base.TraceEvent;
@@ -26,6 +28,7 @@ class SupportLibWebViewCookieManagerAdapter implements WebViewCookieManagerBound
     public List<String> getCookieInfo(String url) {
         try (TraceEvent event = TraceEvent.scoped(
                      "WebView.APICall.AndroidX.COOKIE_MANAGER_GET_COOKIE_INFO")) {
+            recordWebViewApiCall(SupportLibWebViewChromiumFactory.ApiCall.COOKIE_MANAGER_GET_COOKIE_INFO, convertToParameterArray(url));
             recordApiCall(SupportLibWebViewChromiumFactory.ApiCall.COOKIE_MANAGER_GET_COOKIE_INFO);
             return mAwCookieManager.getCookieInfo(url);
         }
diff --git a/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibWebViewRendererAdapter.java b/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibWebViewRendererAdapter.java
index f824b12748..ce3e7b6b30 100644
--- a/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibWebViewRendererAdapter.java
+++ b/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibWebViewRendererAdapter.java
@@ -5,6 +5,8 @@
 package org.chromium.support_lib_glue;
 
 import static org.chromium.support_lib_glue.SupportLibWebViewChromiumFactory.recordApiCall;
+import static org.chromium.support_lib_glue.SupportLibWebViewChromiumFactory.recordWebViewApiCall;
+import static org.chromium.support_lib_glue.SupportLibWebViewChromiumFactory.convertToParameterArray;
 
 import org.chromium.android_webview.AwRenderProcess;
 import org.chromium.android_webview.AwSupportLibIsomorphic;
@@ -36,6 +38,7 @@ class SupportLibWebViewRendererAdapter
     public boolean terminate() {
         try (TraceEvent event =
                         TraceEvent.scoped("WebView.APICall.AndroidX.WEBVIEW_RENDERER_TERMINATE")) {
+            recordWebViewApiCall(ApiCall.WEBVIEW_RENDERER_TERMINATE, convertToParameterArray());
             recordApiCall(ApiCall.WEBVIEW_RENDERER_TERMINATE);
             return mRenderer.terminate();
         }
